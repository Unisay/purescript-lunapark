// Generated by purs bundle 0.11.7
var PS = {};
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showString"] = showString;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqString"] = eqString;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["ordString"] = ordString;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];        
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["applyFlipped"] = applyFlipped;
  exports["on"] = on;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["Discard"] = Discard;
  exports["discard"] = discard;
  exports["composeKleisli"] = composeKleisli;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["discardUnit"] = discardUnit;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* jshint -W083, -W098, -W003 */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          });
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt, canceler;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;
          canceler  = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            step   = bhead(step);
            if (btail === null) {
              bhead = null;
            } else {
              bhead = btail._1;
              btail = btail._2;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_BIND;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = tmp;
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item.
                if (interrupt && interrupt !== tmp) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEff = Aff.Sync;

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };

  exports.foreachE = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");  
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["runPure"] = $foreign.runPure;
  exports["foreachE"] = $foreign.foreachE;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var MonadEff = function (Monad0, liftEff) {
      this.Monad0 = Monad0;
      this.liftEff = liftEff;
  };                                                   
  var liftEff = function (dict) {
      return dict.liftEff;
  };
  exports["liftEff"] = liftEff;
  exports["MonadEff"] = MonadEff;
})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
(function(exports) {
    "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];        
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["bimap"] = bimap;
  exports["Bifunctor"] = Bifunctor;
  exports["lmap"] = lmap;
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];        
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Unit = PS["Data.Unit"];        
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };                 
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 219, column 1 - line 219, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromJust = function (dictPartial) {
      return function (v) {
          var __unused = function (dictPartial1) {
              return function ($dollar35) {
                  return $dollar35;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Just) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Data.Maybe line 270, column 1 - line 270, column 46: " + [ v.constructor.name ]);
          })());
      };
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  var un = function (dictNewtype) {
      return function (v) {
          return unwrap(dictNewtype);
      };
  };
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($64) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($64)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
  exports["un"] = un;
  exports["alaF"] = alaF;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var newtypeDisj = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Disj);
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["newtypeDisj"] = newtypeDisj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($195) {
                  return Control_Apply.applySecond(dictApplicative.Apply0())(f($195));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["intercalate"] = intercalate;
  exports["any"] = any;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function Cont(fn) {
      this.fn = fn;
    }

    var emptyList = {};

    var ConsCell = function (head, tail) {
      this.head = head;
      this.tail = tail;
    };

    function consList(x) {
      return function (xs) {
        return new ConsCell(x, xs);
      };
    }

    function listToArray(list) {
      var arr = [];
      var xs = list;
      while (xs !== emptyList) {
        arr.push(xs.head);
        xs = xs.tail;
      }
      return arr;
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            var buildFrom = function (x, ys) {
              return apply(map(consList)(f(x)))(ys);
            };

            var go = function (acc, currentLen, xs) {
              if (currentLen === 0) {
                return acc;
              } else {
                var last = xs[currentLen - 1];
                return new Cont(function () {
                  return go(buildFrom(last, acc), currentLen - 1, xs);
                });
              }
            };

            return function (array) {
              var result = go(pure(emptyList), array.length, array);
              while (result instanceof Cont) {
                result = result.fn();
              }

              return map(listToArray)(result);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Traversable_Accum = PS["Data.Traversable.Accum"];
  var Data_Traversable_Accum_Internal = PS["Data.Traversable.Accum.Internal"];
  var Prelude = PS["Prelude"];        
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["for"] = $$for;
  exports["traversableArray"] = traversableArray;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 36, column 1 - line 36, column 45: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 229, column 1 - line 229, column 64: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 43, column 1 - line 43, column 45: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 79, column 1 - line 79, column 41: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindEither = new Control_Bind.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (v) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  var altEither = new Control_Alt.Alt(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return v1;
          };
          return v;
      };
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["altEither"] = altEither;
  exports["bindEither"] = bindEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  exports["error"] = $foreign.error;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
    "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
    "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS["Partial"] = PS["Partial"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Partial.Unsafe"];
  var Partial = PS["Partial"];
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith(dictPartial)(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRecM"] = tailRecM;
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
    "use strict";

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];
  exports["runFn2"] = $foreign.runFn2;
  exports["runFn4"] = $foreign.runFn4;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Milliseconds = function (x) {
      return x;
  };          
  var newtypeMilliseconds = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Milliseconds);
  exports["Milliseconds"] = Milliseconds;
  exports["newtypeMilliseconds"] = newtypeMilliseconds;
})(PS["Data.Time.Duration"] = PS["Data.Time.Duration"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Aff"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                          
  var functorAff = new Data_Functor.Functor($foreign._map);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Control.Monad.Aff line 402, column 21 - line 404, column 31: " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Control.Monad.Aff line 397, column 20 - line 401, column 3: " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Control.Monad.Aff line 392, column 12 - line 394, column 20: " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign._makeFiber(ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var v = makeFiber(aff)();
          v.run();
          return v;
      };
  };
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign._bind);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign._pure);
  var monadEffAff = new Control_Monad_Eff_Class.MonadEff(function () {
      return monadAff;
  }, $foreign._liftEff);
  var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
      return monadAff;
  }, $foreign._throwError);
  var monadRecAff = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadAff;
  }, function (k) {
      var go = function (a) {
          return Control_Bind.bind(bindAff)(k(a))(function (v) {
              if (v instanceof Control_Monad_Rec_Class.Done) {
                  return Control_Applicative.pure(applicativeAff)(v.value0);
              };
              if (v instanceof Control_Monad_Rec_Class.Loop) {
                  return go(v.value0);
              };
              throw new Error("Failed pattern match at Control.Monad.Aff line 101, column 7 - line 103, column 22: " + [ v.constructor.name ]);
          });
      };
      return go;
  });
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));
  exports["launchAff"] = launchAff;
  exports["nonCanceler"] = nonCanceler;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadRecAff"] = monadRecAff;
  exports["monadThrowAff"] = monadThrowAff;
  exports["monadEffAff"] = monadEffAff;
  exports["makeAff"] = $foreign.makeAff;
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var TypeEquals = function (from, to) {
      this.from = from;
      this.to = to;
  };
  var to = function (dict) {
      return dict.to;
  };
  var refl = new TypeEquals(function (a) {
      return a;
  }, function (a) {
      return a;
  });
  var from = function (dict) {
      return dict.from;
  };
  exports["TypeEquals"] = TypeEquals;
  exports["to"] = to;
  exports["from"] = from;
  exports["refl"] = refl;
})(PS["Type.Equality"] = PS["Type.Equality"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  }; 
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function ($97) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($97));
              })(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, function ($98) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Right.create($98)));
      });
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, function ($102) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($102)));
      });
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
})(PS["Control.Monad.Except.Trans"] = PS["Control.Monad.Except.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Cont_Trans = PS["Control.Monad.Cont.Trans"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_List_Trans = PS["Control.Monad.List.Trans"];
  var Control_Monad_Maybe_Trans = PS["Control.Monad.Maybe.Trans"];
  var Control_Monad_RWS_Trans = PS["Control.Monad.RWS.Trans"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Monoid = PS["Data.Monoid"];
  var Prelude = PS["Prelude"];        
  var MonadAff = function (MonadEff0, liftAff) {
      this.MonadEff0 = MonadEff0;
      this.liftAff = liftAff;
  };
  var monadAffAff = new MonadAff(function () {
      return Control_Monad_Aff.monadEffAff;
  }, Control_Category.id(Control_Category.categoryFn));
  var liftAff = function (dict) {
      return dict.liftAff;
  };
  exports["liftAff"] = liftAff;
  exports["MonadAff"] = MonadAff;
  exports["monadAffAff"] = monadAffAff;
})(PS["Control.Monad.Aff.Class"] = PS["Control.Monad.Aff.Class"] || {});
(function(exports) {
    "use strict";

  exports.mkEffFn1 = function mkEffFn1(fn) {
    return function(x) {
      return fn(x)();
    };
  };

  exports.runEffFn2 = function runEffFn2(fn) {
    return function(a) {
      return function(b) {
        return function() {
          return fn(a, b);
        };
      };
    };
  };

  exports.runEffFn3 = function runEffFn3(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function() {
            return fn(a, b, c);
          };
        };
      };
    };
  };
})(PS["Control.Monad.Eff.Uncurried"] = PS["Control.Monad.Eff.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Uncurried"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["mkEffFn1"] = $foreign.mkEffFn1;
  exports["runEffFn2"] = $foreign.runEffFn2;
  exports["runEffFn3"] = $foreign.runEffFn3;
})(PS["Control.Monad.Eff.Uncurried"] = PS["Control.Monad.Eff.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Uncurried = PS["Control.Monad.Eff.Uncurried"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Prelude = PS["Prelude"];
  var fromEffFnAff = function (v) {
      return Control_Monad_Aff.makeAff(function (k) {
          return function __do() {
              var v1 = Control_Monad_Eff_Uncurried.runEffFn2(v)(Control_Monad_Eff_Uncurried.mkEffFn1(function ($4) {
                  return k(Data_Either.Left.create($4));
              }))(Control_Monad_Eff_Uncurried.mkEffFn1(function ($5) {
                  return k(Data_Either.Right.create($5));
              }))();
              return function (e) {
                  return Control_Monad_Aff.makeAff(function (k2) {
                      return function __do() {
                          Control_Monad_Eff_Uncurried.runEffFn3(v1)(e)(Control_Monad_Eff_Uncurried.mkEffFn1(function ($6) {
                              return k2(Data_Either.Left.create($6));
                          }))(Control_Monad_Eff_Uncurried.mkEffFn1(function ($7) {
                              return k2(Data_Either.Right.create($7));
                          }))();
                          return Control_Monad_Aff.nonCanceler;
                      };
                  });
              };
          };
      });
  };
  exports["fromEffFnAff"] = fromEffFnAff;
})(PS["Control.Monad.Aff.Compat"] = PS["Control.Monad.Aff.Compat"] || {});
(function(exports) {
    "use strict";

  exports.newRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modifyRef'"] = function (ref) {
    return function (f) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.writeRef = function (ref) {
    return function (val) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var modifyRef = function (ref) {
      return function (f) {
          return $foreign["modifyRef'"](ref)(function (s) {
              return {
                  state: f(s),
                  value: Data_Unit.unit
              };
          });
      };
  };
  exports["modifyRef"] = modifyRef;
  exports["newRef"] = $foreign.newRef;
  exports["readRef"] = $foreign.readRef;
  exports["writeRef"] = $foreign.writeRef;
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];                                                           
  var runExcept = function ($0) {
      return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_Except_Trans.runExceptT($0));
  };
  exports["runExcept"] = runExcept;
})(PS["Control.Monad.Except"] = PS["Control.Monad.Except"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.FunctorWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var FunctorWithIndex = function (Functor0, mapWithIndex) {
      this.Functor0 = Functor0;
      this.mapWithIndex = mapWithIndex;
  };
  var mapWithIndex = function (dict) {
      return dict.mapWithIndex;
  };
  exports["FunctorWithIndex"] = FunctorWithIndex;
  exports["mapWithIndex"] = mapWithIndex;
})(PS["Data.FunctorWithIndex"] = PS["Data.FunctorWithIndex"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
      this.Foldable0 = Foldable0;
      this.foldMapWithIndex = foldMapWithIndex;
      this.foldlWithIndex = foldlWithIndex;
      this.foldrWithIndex = foldrWithIndex;
  };
  var foldrWithIndex = function (dict) {
      return dict.foldrWithIndex;
  };
  var foldlWithIndex = function (dict) {
      return dict.foldlWithIndex;
  };
  var foldMapWithIndex = function (dict) {
      return dict.foldMapWithIndex;
  };
  exports["FoldableWithIndex"] = FoldableWithIndex;
  exports["foldrWithIndex"] = foldrWithIndex;
  exports["foldlWithIndex"] = foldlWithIndex;
  exports["foldMapWithIndex"] = foldMapWithIndex;
})(PS["Data.FoldableWithIndex"] = PS["Data.FoldableWithIndex"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Traversable_Accum = PS["Data.Traversable.Accum"];
  var Data_Traversable_Accum_Internal = PS["Data.Traversable.Accum.Internal"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var TraversableWithIndex = function (FoldableWithIndex1, FunctorWithIndex0, Traversable2, traverseWithIndex) {
      this.FoldableWithIndex1 = FoldableWithIndex1;
      this.FunctorWithIndex0 = FunctorWithIndex0;
      this.Traversable2 = Traversable2;
      this.traverseWithIndex = traverseWithIndex;
  };
  var traverseWithIndex = function (dict) {
      return dict.traverseWithIndex;
  };
  exports["TraversableWithIndex"] = TraversableWithIndex;
  exports["traverseWithIndex"] = traverseWithIndex;
})(PS["Data.TraversableWithIndex"] = PS["Data.TraversableWithIndex"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Prelude = PS["Prelude"];        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var showNonEmpty = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(NonEmpty " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["showNonEmpty"] = showNonEmpty;
})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
(function(exports) {
    "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Unfoldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Unfoldable = function (unfoldr) {
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable($foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($158) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($158));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 81, column 12 - line 83, column 30: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          return function ($159) {
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev($159));
          };
      };
  });
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var showList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Nil) {
              return "Nil";
          };
          return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
      });
  };
  var showNonEmptyList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(NonEmptyList " + (Data_Show.show(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow)))(v) + ")");
      });
  };                                               
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["showList"] = showList;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["showNonEmptyList"] = showNonEmptyList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List line 368, column 3 - line 368, column 19: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  exports["reverse"] = reverse;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];        
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List_Types.Nil) {
              $copy_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
              return;
          };
          if (v.value0 instanceof Data_List_Types.Cons) {
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue line 50, column 1 - line 50, column 63: " + [ v.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
  exports["CatQueue"] = CatQueue;
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS["Data.CatQueue"] = PS["Data.CatQueue"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_CatQueue = PS["Data.CatQueue"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_NaturalTransformation = PS["Data.NaturalTransformation"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];        
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var link = function (v) {
      return function (cat) {
          if (v instanceof CatNil) {
              return cat;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(cat));
          };
          throw new Error("Failed pattern match at Data.CatList line 110, column 1 - line 110, column 54: " + [ v.constructor.name, cat.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function ($copy_v) {
                  return function ($copy_c) {
                      return function ($copy_v1) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_c = $copy_c;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, c, v1) {
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return c;
                              };
                              if (v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v;
                                  $tco_var_c = v(c)(v1.value0);
                                  $copy_v1 = v1.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.CatList line 125, column 3 - line 125, column 59: " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
                          };
                          return $tco_result;
                      };
                  };
              };
              var go = function ($copy_xs) {
                  return function ($copy_ys) {
                      var $tco_var_xs = $copy_xs;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(xs, ys) {
                          var v = Data_CatQueue.uncons(xs);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_xs = v.value0.value1;
                              $copy_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.CatList line 121, column 14 - line 123, column 67: " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_xs, $copy_ys);
                      };
                      return $tco_result;
                  };
              };
              return go(q)(Data_List_Types.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $41 = Data_CatQueue["null"](v.value1);
              if ($41) {
                  return CatNil.value;
              };
              return foldr(link)(CatNil.value)(v.value1);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList line 101, column 1 - line 101, column 61: " + [ v.constructor.name ]);
  }; 
  var empty = CatNil.value;
  var append = function (v) {
      return function (v1) {
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatNil) {
              return v1;
          };
          return link(v)(v1);
      };
  }; 
  var semigroupCatList = new Data_Semigroup.Semigroup(append);
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["CatNil"] = CatNil;
  exports["CatCons"] = CatCons;
  exports["empty"] = empty;
  exports["append"] = append;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
})(PS["Data.CatList"] = PS["Data.CatList"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_CatList = PS["Data.CatList"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Free = (function () {
      function Free(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Free.create = function (value0) {
          return function (value1) {
              return new Free(value0, value1);
          };
      };
      return Free;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var toView = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          var runExpF = function (v2) {
              return v2;
          };
          var concatF = function (v2) {
              return function (r) {
                  return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
              };
          };
          if (v.value0 instanceof Return) {
              var v2 = Data_CatList.uncons(v.value1);
              if (v2 instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return new Return(v.value0.value0);
              };
              if (v2 instanceof Data_Maybe.Just) {
                  $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
                  return;
              };
              throw new Error("Failed pattern match at Control.Monad.Free line 220, column 7 - line 224, column 64: " + [ v2.constructor.name ]);
          };
          if (v.value0 instanceof Bind) {
              $tco_done = true;
              return new Bind(v.value0.value0, function (a) {
                  return concatF(v.value0.value1(a))(v.value1);
              });
          };
          throw new Error("Failed pattern match at Control.Monad.Free line 218, column 3 - line 226, column 56: " + [ v.value0.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var runFreeM = function (dictFunctor) {
      return function (dictMonadRec) {
          return function (k) {
              var go = function (f) {
                  var v = toView(f);
                  if (v instanceof Return) {
                      return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(v.value0));
                  };
                  if (v instanceof Bind) {
                      return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(k(Data_Functor.map(dictFunctor)(v.value1)(v.value0)));
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free line 187, column 10 - line 189, column 37: " + [ v.constructor.name ]);
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
          };
      };
  };
  var resume$prime = function (k) {
      return function (j) {
          return function (f) {
              var v = toView(f);
              if (v instanceof Return) {
                  return j(v.value0);
              };
              if (v instanceof Bind) {
                  return k(v.value0)(v.value1);
              };
              throw new Error("Failed pattern match at Control.Monad.Free line 206, column 17 - line 208, column 20: " + [ v.constructor.name ]);
          };
      };
  };
  var fromView = function (f) {
      return new Free(f, Data_CatList.empty);
  };
  var freeMonad = new Control_Monad.Monad(function () {
      return freeApplicative;
  }, function () {
      return freeBind;
  });
  var freeFunctor = new Data_Functor.Functor(function (k) {
      return function (f) {
          return Control_Bind.bindFlipped(freeBind)(function ($118) {
              return Control_Applicative.pure(freeApplicative)(k($118));
          })(f);
      };
  });
  var freeBind = new Control_Bind.Bind(function () {
      return freeApply;
  }, function (v) {
      return function (k) {
          return new Free(v.value0, Data_CatList.snoc(v.value1)(k));
      };
  });
  var freeApply = new Control_Apply.Apply(function () {
      return freeFunctor;
  }, Control_Monad.ap(freeMonad));
  var freeApplicative = new Control_Applicative.Applicative(function () {
      return freeApply;
  }, function ($119) {
      return fromView(Return.create($119));
  });
  var liftF = function (f) {
      return fromView(new Bind(f, function ($120) {
          return Control_Applicative.pure(freeApplicative)($120);
      }));
  };
  exports["liftF"] = liftF;
  exports["runFreeM"] = runFreeM;
  exports["resume'"] = resume$prime;
  exports["freeFunctor"] = freeFunctor;
  exports["freeBind"] = freeBind;
  exports["freeApplicative"] = freeApplicative;
  exports["freeApply"] = freeApply;
  exports["freeMonad"] = freeMonad;
})(PS["Control.Monad.Free"] = PS["Control.Monad.Free"] || {});
(function(exports) {
    "use strict";

  function id(x) {
    return x;
  } 

  exports.fromBoolean = id;
  exports.fromNumber = id;
  exports.fromString = id;
  exports.fromArray = id;
  exports.fromObject = id;

  exports.stringify = function (j) {
    return JSON.stringify(j);
  };

  var objToString = Object.prototype.toString;

  function isArray(a) {
    return objToString.call(a) === "[object Array]";
  }

  exports._foldJson = function (isNull, isBool, isNum, isStr, isArr, isObj, j) {
    if (j == null) return isNull(null);
    else if (typeof j === "boolean") return isBool(j);
    else if (typeof j === "number") return isNum(j);
    else if (typeof j === "string") return isStr(j);
    else if (objToString.call(j) === "[object Array]")
      return isArr(j);
    else return isObj(j);
  };
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
    "use strict";

  exports._copyEff = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f;
  };

  exports._fmapStrMap = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(m0[k]);
      }
    }
    return m;
  };

  exports._mapWithKey = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(k)(m0[k]);
      }
    }
    return m;
  };

  exports._foldM = function (bind) {
    return function (f) {
      return function (mz) {
        return function (m) {
          var acc = mz;
          function g(k) {
            return function (z) {
              return f(z)(k)(m[k]);
            };
          }
          for (var k in m) {
            if (hasOwnProperty.call(m, k)) {
              acc = bind(acc)(g(k));
            }
          }
          return acc;
        };
      };
    };
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }

  exports.toArrayWithKey = toArrayWithKey;
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
    "use strict";       

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  //------------------------------------------------------------------------------
  // Partial ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unsafeIndexImpl = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];                                                        
  var unsafeIndex = function (dictPartial) {
      return $foreign.unsafeIndexImpl;
  }; 
  var toUnfoldable = function (dictUnfoldable) {
      return function (xs) {
          var len = $foreign.length(xs);
          var f = function (i) {
              if (i < len) {
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(unsafeIndex()(xs)(i), i + 1 | 0));
              };
              if (Data_Boolean.otherwise) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Array line 139, column 3 - line 141, column 26: " + [ i.constructor.name ]);
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(f)(0);
      };
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["unsafeIndex"] = unsafeIndex;
  exports["snoc"] = $foreign.snoc;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (m) {
    return function (k) {
      return function (v) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.StrMap.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.StrMap"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_StrMap_ST = PS["Data.StrMap.ST"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];        
  var values = $foreign.toArrayWithKey(function (v) {
      return function (v1) {
          return v1;
      };
  });
  var toUnfoldable = function (dictUnfoldable) {
      return function ($46) {
          return Data_Array.toUnfoldable(dictUnfoldable)($foreign.toArrayWithKey(Data_Tuple.Tuple.create)($46));
      };
  };                                                             
  var thawST = $foreign._copyEff;
  var pureST = function (f) {
      return Control_Monad_Eff.runPure($foreign.runST(f));
  };
  var singleton = function (k) {
      return function (v) {
          return pureST(function __do() {
              var v1 = Data_StrMap_ST["new"]();
              return Data_StrMap_ST.poke(v1)(k)(v)();
          });
      };
  };
  var mutate = function (f) {
      return function (m) {
          return pureST(function __do() {
              var v = thawST(m)();
              var v1 = f(v)();
              return v;
          });
      };
  };                                                                                                 
  var mapWithKey = function (f) {
      return function (m) {
          return $foreign._mapWithKey(m, f);
      };
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign._lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var insert = function (k) {
      return function (v) {
          return mutate(function (s) {
              return Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_StrMap_ST.poke(s)(k)(v));
          });
      };
  };
  var functorStrMap = new Data_Functor.Functor(function (f) {
      return function (m) {
          return $foreign._fmapStrMap(m, f);
      };
  });
  var functorWithIndexStrMap = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorStrMap;
  }, mapWithKey);
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return pureST(function __do() {
              var v = Data_StrMap_ST["new"]();
              Control_Monad_Eff.foreachE(Data_Array.fromFoldable(dictFoldable)(l))(function (v1) {
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_StrMap_ST.poke(v)(v1.value0)(v1.value1));
              })();
              return v;
          });
      };
  };
  var fold = $foreign._foldM(Data_Function.applyFlipped);
  var foldMap = function (dictMonoid) {
      return function (f) {
          return fold(function (acc) {
              return function (k) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(k)(v));
                  };
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  };
  var foldableStrMap = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return foldMap(dictMonoid)(Data_Function["const"](f));
      };
  }, function (f) {
      return fold(function (z) {
          return function (v) {
              return f(z);
          };
      });
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(z)(values(m));
          };
      };
  });
  var foldableWithIndexStrMap = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableStrMap;
  }, function (dictMonoid) {
      return foldMap(dictMonoid);
  }, function (f) {
      return fold(Data_Function.flip(f));
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Tuple.uncurry(f))(z)($foreign.toArrayWithKey(Data_Tuple.Tuple.create)(m));
          };
      };
  });
  var traversableWithIndexStrMap = new Data_TraversableWithIndex.TraversableWithIndex(function () {
      return foldableWithIndexStrMap;
  }, function () {
      return functorWithIndexStrMap;
  }, function () {
      return traversableStrMap;
  }, function (dictApplicative) {
      return function (f) {
          return function (ms) {
              return fold(function (acc) {
                  return function (k) {
                      return function (v) {
                          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function.flip(insert(k)))(acc))(f(k)(v));
                      };
                  };
              })(Control_Applicative.pure(dictApplicative)($foreign.empty))(ms);
          };
      };
  });
  var traversableStrMap = new Data_Traversable.Traversable(function () {
      return foldableStrMap;
  }, function () {
      return functorStrMap;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableStrMap)(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function ($48) {
          return Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexStrMap)(dictApplicative)(Data_Function["const"]($48));
      };
  });
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["mapWithKey"] = mapWithKey;
  exports["values"] = values;
  exports["fold"] = fold;
  exports["foldMap"] = foldMap;
  exports["thawST"] = thawST;
  exports["pureST"] = pureST;
  exports["functorStrMap"] = functorStrMap;
  exports["functorWithIndexStrMap"] = functorWithIndexStrMap;
  exports["foldableStrMap"] = foldableStrMap;
  exports["foldableWithIndexStrMap"] = foldableWithIndexStrMap;
  exports["traversableStrMap"] = traversableStrMap;
  exports["traversableWithIndexStrMap"] = traversableWithIndexStrMap;
  exports["empty"] = $foreign.empty;
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Argonaut.Core"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Show = PS["Data.Show"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var verbJsonType = function (def) {
      return function (f) {
          return function (fold) {
              return fold(def)(f);
          };
      };
  };
  var toJsonType = verbJsonType(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var showJson = new Data_Show.Show($foreign.stringify);
  var jsonSingletonObject = function (key) {
      return function (val) {
          return $foreign.fromObject(Data_StrMap.singleton(key)(val));
      };
  };                                            
  var jsonEmptyObject = $foreign.fromObject(Data_StrMap.empty);      
  var foldJsonString = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                        
  var foldJsonObject = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, j);
          };
      };
  };                                        
  var toObject = toJsonType(foldJsonObject);
  var foldJsonNumber = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                    
  var foldJsonBoolean = function (d) {
      return function (f) {
          return function (j) {
              return $foreign._foldJson(Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };
  exports["foldJsonBoolean"] = foldJsonBoolean;
  exports["foldJsonNumber"] = foldJsonNumber;
  exports["foldJsonString"] = foldJsonString;
  exports["foldJsonObject"] = foldJsonObject;
  exports["toObject"] = toObject;
  exports["jsonEmptyObject"] = jsonEmptyObject;
  exports["jsonSingletonObject"] = jsonSingletonObject;
  exports["showJson"] = showJson;
  exports["fromBoolean"] = $foreign.fromBoolean;
  exports["fromNumber"] = $foreign.fromNumber;
  exports["fromString"] = $foreign.fromString;
  exports["fromArray"] = $foreign.fromArray;
  exports["fromObject"] = $foreign.fromObject;
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_Lazy = PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = PS["Data.List.Lazy.Types"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map line 195, column 5 - line 195, column 22: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  }; 
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map line 413, column 3 - line 418, column 88: " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map line 410, column 1 - line 410, column 80: " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map line 449, column 5 - line 454, column 108: " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map line 446, column 3 - line 446, column 56: " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map line 429, column 3 - line 429, column 55: " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var empty = Leaf.value;
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
})(PS["Data.Map"] = PS["Data.Map"] || {});
(function(exports) {
    "use strict";

  exports.toLower = function (s) {
    return s.toLowerCase();
  };
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.String"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Prelude = PS["Prelude"];
  exports["toLower"] = $foreign.toLower;
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_String = PS["Data.String"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var DecodeJson = function (decodeJson) {
      this.decodeJson = decodeJson;
  }; 
  var decodeJsonString = new DecodeJson(Data_Argonaut_Core.foldJsonString(new Data_Either.Left("Value is not a String"))(Data_Either.Right.create));
  var decodeJsonNumber = new DecodeJson(Data_Argonaut_Core.foldJsonNumber(new Data_Either.Left("Value is not a Number"))(Data_Either.Right.create));                               
  var decodeJsonJson = new DecodeJson(Data_Either.Right.create);
  var decodeJsonBoolean = new DecodeJson(Data_Argonaut_Core.foldJsonBoolean(new Data_Either.Left("Value is not a Boolean"))(Data_Either.Right.create));
  var decodeJson = function (dict) {
      return dict.decodeJson;
  };
  var decodeJObject = function ($33) {
      return Data_Maybe.maybe(new Data_Either.Left("Value is not an Object"))(Data_Either.Right.create)(Data_Argonaut_Core.toObject($33));
  };
  var decodeStrMap = function (dictDecodeJson) {
      return new DecodeJson(function ($34) {
          return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(function (v) {
              return "Couldn't decode StrMap: " + v;
          })(Control_Bind.composeKleisliFlipped(Data_Either.bindEither)(Data_Traversable.traverse(Data_StrMap.traversableStrMap)(Data_Either.applicativeEither)(decodeJson(dictDecodeJson)))(decodeJObject)($34));
      });
  };
  exports["DecodeJson"] = DecodeJson;
  exports["decodeJson"] = decodeJson;
  exports["decodeJsonBoolean"] = decodeJsonBoolean;
  exports["decodeJsonNumber"] = decodeJsonNumber;
  exports["decodeJsonString"] = decodeJsonString;
  exports["decodeJsonJson"] = decodeJsonJson;
  exports["decodeStrMap"] = decodeStrMap;
})(PS["Data.Argonaut.Decode.Class"] = PS["Data.Argonaut.Decode.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Class = PS["Data.Argonaut.Decode.Class"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_StrMap = PS["Data.StrMap"];
  var Prelude = PS["Prelude"];
  var getField = function (dictDecodeJson) {
      return function (o) {
          return function (s) {
              return Data_Maybe.maybe(Data_Either.Left.create("Expected field " + Data_Show.show(Data_Show.showString)(s)))(Data_Argonaut_Decode_Class.decodeJson(dictDecodeJson))(Data_StrMap.lookup(s)(o));
          };
      };
  };
  exports["getField"] = getField;
})(PS["Data.Argonaut.Decode.Combinators"] = PS["Data.Argonaut.Decode.Combinators"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_String = PS["Data.String"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Void = PS["Data.Void"];
  var Prelude = PS["Prelude"];        
  var EncodeJson = function (encodeJson) {
      this.encodeJson = encodeJson;
  };                                                                                       
  var encodeJsonJson = new EncodeJson(Control_Category.id(Control_Category.categoryFn));
  var encodeJsonJString = new EncodeJson(Data_Argonaut_Core.fromString);
  var encodeJsonJNumber = new EncodeJson(Data_Argonaut_Core.fromNumber);
  var encodeJsonJBoolean = new EncodeJson(Data_Argonaut_Core.fromBoolean);
  var encodeJson = function (dict) {
      return dict.encodeJson;
  };
  var encodeJsonArray = function (dictEncodeJson) {
      return new EncodeJson(function (json) {
          return Data_Argonaut_Core.fromArray(Data_Functor.map(Data_Functor.functorArray)(encodeJson(dictEncodeJson))(json));
      });
  };
  var encodeStrMap = function (dictEncodeJson) {
      return new EncodeJson(function ($23) {
          return Data_Argonaut_Core.fromObject(Data_Functor.map(Data_StrMap.functorStrMap)(encodeJson(dictEncodeJson))($23));
      });
  };
  exports["encodeJson"] = encodeJson;
  exports["EncodeJson"] = EncodeJson;
  exports["encodeJsonJBoolean"] = encodeJsonJBoolean;
  exports["encodeJsonJNumber"] = encodeJsonJNumber;
  exports["encodeJsonJString"] = encodeJsonJString;
  exports["encodeJsonJson"] = encodeJsonJson;
  exports["encodeJsonArray"] = encodeJsonArray;
  exports["encodeStrMap"] = encodeStrMap;
})(PS["Data.Argonaut.Encode.Class"] = PS["Data.Argonaut.Encode.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Encode_Class = PS["Data.Argonaut.Encode.Class"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var extend = function (dictEncodeJson) {
      return function (v) {
          return function ($11) {
              return Data_Argonaut_Core.foldJsonObject(Data_Argonaut_Core.jsonSingletonObject(v.value0)(v.value1))(function ($12) {
                  return Data_Argonaut_Core.fromObject(Data_StrMap.insert(v.value0)(v.value1)($12));
              })(Data_Argonaut_Encode_Class.encodeJson(dictEncodeJson)($11));
          };
      };
  };
  exports["extend"] = extend;
})(PS["Data.Argonaut.Encode.Combinators"] = PS["Data.Argonaut.Encode.Combinators"] || {});
(function(exports) {
    "use strict";

  exports._jsonParser = function (fail, succ, s) {
    try {
      return succ(JSON.parse(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Argonaut.Parser"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Either = PS["Data.Either"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];        
  var jsonParser = function (j) {
      return $foreign._jsonParser(Data_Either.Left.create, Data_Either.Right.create, j);
  };
  exports["jsonParser"] = jsonParser;
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function(exports) {
    "use strict";

  exports.toForeign = function (value) {
    return value;
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var singleton = function ($160) {
      return Data_List_Types.NonEmptyList(Data_NonEmpty.singleton(Data_List_Types.plusList)($160));
  };
  exports["singleton"] = singleton;
})(PS["Data.List.NonEmpty"] = PS["Data.List.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Foreign"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Prelude = PS["Prelude"];        
  var ForeignError = (function () {
      function ForeignError(value0) {
          this.value0 = value0;
      };
      ForeignError.create = function (value0) {
          return new ForeignError(value0);
      };
      return ForeignError;
  })();
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var JSONError = (function () {
      function JSONError(value0) {
          this.value0 = value0;
      };
      JSONError.create = function (value0) {
          return new JSONError(value0);
      };
      return JSONError;
  })();
  var showForeignError = new Data_Show.Show(function (v) {
      if (v instanceof ForeignError) {
          return "(ForeignError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof ErrorAtIndex) {
          return "(ErrorAtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof ErrorAtProperty) {
          return "(ErrorAtProperty " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof JSONError) {
          return "(JSONError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof TypeMismatch) {
          return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
      };
      throw new Error("Failed pattern match at Data.Foreign line 64, column 1 - line 64, column 47: " + [ v.constructor.name ]);
  });
  var fail = function ($121) {
      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity))(Data_List_NonEmpty.singleton($121));
  };
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
          };
          if (Data_Boolean.otherwise) {
              return fail(new TypeMismatch(tag, $foreign.tagOf(value)));
          };
          throw new Error("Failed pattern match at Data.Foreign line 104, column 1 - line 104, column 55: " + [ tag.constructor.name, value.constructor.name ]);
      };
  };
  var readString = unsafeReadTagged("String");
  exports["ForeignError"] = ForeignError;
  exports["TypeMismatch"] = TypeMismatch;
  exports["ErrorAtIndex"] = ErrorAtIndex;
  exports["ErrorAtProperty"] = ErrorAtProperty;
  exports["JSONError"] = JSONError;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["readString"] = readString;
  exports["fail"] = fail;
  exports["showForeignError"] = showForeignError;
  exports["toForeign"] = $foreign.toForeign;
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
    "use strict";

  exports.unsafeGetFn = function(label, rec) {
    return rec[label];
  };

  exports.unsafeHasFn = function(label, rec) {
    return {}.hasOwnProperty.call(rec, label);
  };
})(PS["Data.Record.Unsafe"] = PS["Data.Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Record.Unsafe"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];         
  var unsafeHas = Data_Function_Uncurried.runFn2($foreign.unsafeHasFn);
  var unsafeGet = Data_Function_Uncurried.runFn2($foreign.unsafeGetFn);
  exports["unsafeGet"] = unsafeGet;
  exports["unsafeHas"] = unsafeHas;
})(PS["Data.Record.Unsafe"] = PS["Data.Record.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS["Data.Symbol"] = PS["Data.Symbol"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Record_Unsafe = PS["Data.Record.Unsafe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Symbol = PS["Data.Symbol"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];
  var Type_Row = PS["Type.Row"];
  var VariantFMatchCases = {};
  var variantFMatchNil = VariantFMatchCases;
  var variantFMatchCons = function (dictVariantFMatchCases) {
      return function (dictRowCons) {
          return function (dictTypeEquals) {
              return VariantFMatchCases;
          };
      };
  };
  exports["VariantFMatchCases"] = VariantFMatchCases;
  exports["variantFMatchCons"] = variantFMatchCons;
  exports["variantFMatchNil"] = variantFMatchNil;
})(PS["Data.Variant.Internal"] = PS["Data.Variant.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Record_Unsafe = PS["Data.Record.Unsafe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Variant_Internal = PS["Data.Variant.Internal"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];
  var Type_Proxy = PS["Type.Proxy"];
  var Type_Row = PS["Type.Row"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var onMatch = function (dictRowToList) {
      return function (dictVariantFMatchCases) {
          return function (dictUnion) {
              return function (r) {
                  return function (k) {
                      return function (v) {
                          if (Data_Record_Unsafe.unsafeHas(v.type)(r)) {
                              return Data_Record_Unsafe.unsafeGet(v.type)(r)(v.value);
                          };
                          return k(v);
                      };
                  };
              };
          };
      };
  };
  var on = function (dictRowCons) {
      return function (dictIsSymbol) {
          return function (p) {
              return function (f) {
                  return function (g) {
                      return function (r) {
                          if (r.type === Data_Symbol.reflectSymbol(dictIsSymbol)(p)) {
                              return f(r.value);
                          };
                          return g(r);
                      };
                  };
              };
          };
      };
  };
  var inj = function (dictRowCons) {
      return function (dictIsSymbol) {
          return function (dictFunctor) {
              return function (p) {
                  return function (value) {
                      return {
                          type: Data_Symbol.reflectSymbol(dictIsSymbol)(p),
                          value: value,
                          map: Data_Functor.map(dictFunctor)
                      };
                  };
              };
          };
      };
  };
  var functorVariantF = new Data_Functor.Functor(function (f) {
      return function (a) {
          return {
              type: a.type,
              value: a.map(f)(a.value),
              map: a.map
          };
      };
  });
  var case_ = function (r) {
      return Partial_Unsafe.unsafeCrashWith("Data.Functor.Variant: pattern match failure [" + (r.type + "]"));
  };
  var match = function (dictRowToList) {
      return function (dictVariantFMatchCases) {
          return function (dictUnion) {
              return function (r) {
                  return onMatch(dictRowToList)(dictVariantFMatchCases)(dictUnion)(r)(case_);
              };
          };
      };
  };
  exports["inj"] = inj;
  exports["on"] = on;
  exports["onMatch"] = onMatch;
  exports["case_"] = case_;
  exports["match"] = match;
  exports["functorVariantF"] = functorVariantF;
})(PS["Data.Functor.Variant"] = PS["Data.Functor.Variant"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var OPTIONS = (function () {
      function OPTIONS() {

      };
      OPTIONS.value = new OPTIONS();
      return OPTIONS;
  })();
  var GET = (function () {
      function GET() {

      };
      GET.value = new GET();
      return GET;
  })();
  var HEAD = (function () {
      function HEAD() {

      };
      HEAD.value = new HEAD();
      return HEAD;
  })();
  var POST = (function () {
      function POST() {

      };
      POST.value = new POST();
      return POST;
  })();
  var PUT = (function () {
      function PUT() {

      };
      PUT.value = new PUT();
      return PUT;
  })();
  var DELETE = (function () {
      function DELETE() {

      };
      DELETE.value = new DELETE();
      return DELETE;
  })();
  var TRACE = (function () {
      function TRACE() {

      };
      TRACE.value = new TRACE();
      return TRACE;
  })();
  var CONNECT = (function () {
      function CONNECT() {

      };
      CONNECT.value = new CONNECT();
      return CONNECT;
  })();
  var PROPFIND = (function () {
      function PROPFIND() {

      };
      PROPFIND.value = new PROPFIND();
      return PROPFIND;
  })();
  var PROPPATCH = (function () {
      function PROPPATCH() {

      };
      PROPPATCH.value = new PROPPATCH();
      return PROPPATCH;
  })();
  var MKCOL = (function () {
      function MKCOL() {

      };
      MKCOL.value = new MKCOL();
      return MKCOL;
  })();
  var COPY = (function () {
      function COPY() {

      };
      COPY.value = new COPY();
      return COPY;
  })();
  var MOVE = (function () {
      function MOVE() {

      };
      MOVE.value = new MOVE();
      return MOVE;
  })();
  var LOCK = (function () {
      function LOCK() {

      };
      LOCK.value = new LOCK();
      return LOCK;
  })();
  var UNLOCK = (function () {
      function UNLOCK() {

      };
      UNLOCK.value = new UNLOCK();
      return UNLOCK;
  })();
  var PATCH = (function () {
      function PATCH() {

      };
      PATCH.value = new PATCH();
      return PATCH;
  })();
  var unCustomMethod = function (v) {
      return v;
  };
  var showMethod = new Data_Show.Show(function (v) {
      if (v instanceof OPTIONS) {
          return "OPTIONS";
      };
      if (v instanceof GET) {
          return "GET";
      };
      if (v instanceof HEAD) {
          return "HEAD";
      };
      if (v instanceof POST) {
          return "POST";
      };
      if (v instanceof PUT) {
          return "PUT";
      };
      if (v instanceof DELETE) {
          return "DELETE";
      };
      if (v instanceof TRACE) {
          return "TRACE";
      };
      if (v instanceof CONNECT) {
          return "CONNECT";
      };
      if (v instanceof PROPFIND) {
          return "PROPFIND";
      };
      if (v instanceof PROPPATCH) {
          return "PROPPATCH";
      };
      if (v instanceof MKCOL) {
          return "MKCOL";
      };
      if (v instanceof COPY) {
          return "COPY";
      };
      if (v instanceof MOVE) {
          return "MOVE";
      };
      if (v instanceof LOCK) {
          return "LOCK";
      };
      if (v instanceof UNLOCK) {
          return "UNLOCK";
      };
      if (v instanceof PATCH) {
          return "PATCH";
      };
      throw new Error("Failed pattern match at Data.HTTP.Method line 42, column 1 - line 42, column 35: " + [ v.constructor.name ]);
  });
  var print = Data_Either.either(Data_Show.show(showMethod))(unCustomMethod);
  exports["OPTIONS"] = OPTIONS;
  exports["GET"] = GET;
  exports["HEAD"] = HEAD;
  exports["POST"] = POST;
  exports["PUT"] = PUT;
  exports["DELETE"] = DELETE;
  exports["TRACE"] = TRACE;
  exports["CONNECT"] = CONNECT;
  exports["PROPFIND"] = PROPFIND;
  exports["PROPPATCH"] = PROPPATCH;
  exports["MKCOL"] = MKCOL;
  exports["COPY"] = COPY;
  exports["MOVE"] = MOVE;
  exports["LOCK"] = LOCK;
  exports["UNLOCK"] = UNLOCK;
  exports["PATCH"] = PATCH;
  exports["unCustomMethod"] = unCustomMethod;
  exports["print"] = print;
  exports["showMethod"] = showMethod;
})(PS["Data.HTTP.Method"] = PS["Data.HTTP.Method"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var MediaType = function (x) {
      return x;
  }; 
  var newtypeMediaType = new Data_Newtype.Newtype(function (n) {
      return n;
  }, MediaType);
  exports["MediaType"] = MediaType;
  exports["newtypeMediaType"] = newtypeMediaType;
})(PS["Data.MediaType"] = PS["Data.MediaType"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_MediaType = PS["Data.MediaType"];           
  var applicationJSON = "application/json";
  exports["applicationJSON"] = applicationJSON;
})(PS["Data.MediaType.Common"] = PS["Data.MediaType.Common"] || {});
(function(exports) {
    "use strict";

  exports["null"] = null;

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  exports["toNullable"] = toNullable;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
    "use strict";

  // Alias require to prevent webpack or browserify from actually requiring.
  var req = typeof module === "undefined" ? undefined : module.require;
  var util = req === undefined ? undefined : req("util");

  exports.traceAny = function () {
    return function (x) {
      return function (k) {
        // node only recurses two levels into an object before printing
        // "[object]" for further objects when using console.log()
        if (util !== undefined) {
          console.log(util.inspect(x, { depth: null, colors: true }));
        } else {
          console.log(x);
        }
        return k({});
      };
    };
  };
})(PS["Debug.Trace"] = PS["Debug.Trace"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Debug.Trace"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var DebugWarning = {};
  var warn = function (dictWarn) {
      return DebugWarning;
  };
  var traceAnyA = function (dictDebugWarning) {
      return function (dictApplicative) {
          return function (s) {
              return $foreign.traceAny(dictDebugWarning)(s)(function (v) {
                  return Control_Applicative.pure(dictApplicative)(Data_Unit.unit);
              });
          };
      };
  };
  var spy = function (dictDebugWarning) {
      return function (a) {
          return $foreign.traceAny(dictDebugWarning)(a)(function (v) {
              return a;
          });
      };
  };
  exports["DebugWarning"] = DebugWarning;
  exports["spy"] = spy;
  exports["traceAnyA"] = traceAnyA;
  exports["warn"] = warn;
})(PS["Debug.Trace"] = PS["Debug.Trace"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Data_Argonaut = PS["Data.Argonaut"];
  var Data_Argonaut_Decode_Class = PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Combinators = PS["Data.Argonaut.Decode.Combinators"];
  var Data_Either = PS["Data.Either"];
  var Prelude = PS["Prelude"];        
  var ElementClickIntercepted = (function () {
      function ElementClickIntercepted() {

      };
      ElementClickIntercepted.value = new ElementClickIntercepted();
      return ElementClickIntercepted;
  })();
  var ElementNotSelectable = (function () {
      function ElementNotSelectable() {

      };
      ElementNotSelectable.value = new ElementNotSelectable();
      return ElementNotSelectable;
  })();
  var ElementNotInteractable = (function () {
      function ElementNotInteractable() {

      };
      ElementNotInteractable.value = new ElementNotInteractable();
      return ElementNotInteractable;
  })();
  var InsecureCertificate = (function () {
      function InsecureCertificate() {

      };
      InsecureCertificate.value = new InsecureCertificate();
      return InsecureCertificate;
  })();
  var InvalidArgument = (function () {
      function InvalidArgument() {

      };
      InvalidArgument.value = new InvalidArgument();
      return InvalidArgument;
  })();
  var InvalidCookieDomain = (function () {
      function InvalidCookieDomain() {

      };
      InvalidCookieDomain.value = new InvalidCookieDomain();
      return InvalidCookieDomain;
  })();
  var InvalidCoordinates = (function () {
      function InvalidCoordinates() {

      };
      InvalidCoordinates.value = new InvalidCoordinates();
      return InvalidCoordinates;
  })();
  var InvalidElementState = (function () {
      function InvalidElementState() {

      };
      InvalidElementState.value = new InvalidElementState();
      return InvalidElementState;
  })();
  var InvalidSelector = (function () {
      function InvalidSelector() {

      };
      InvalidSelector.value = new InvalidSelector();
      return InvalidSelector;
  })();
  var InvalidSessionId = (function () {
      function InvalidSessionId() {

      };
      InvalidSessionId.value = new InvalidSessionId();
      return InvalidSessionId;
  })();
  var JavaScriptError = (function () {
      function JavaScriptError() {

      };
      JavaScriptError.value = new JavaScriptError();
      return JavaScriptError;
  })();
  var MoveTargetOutOfBounds = (function () {
      function MoveTargetOutOfBounds() {

      };
      MoveTargetOutOfBounds.value = new MoveTargetOutOfBounds();
      return MoveTargetOutOfBounds;
  })();
  var NoSuchAlert = (function () {
      function NoSuchAlert() {

      };
      NoSuchAlert.value = new NoSuchAlert();
      return NoSuchAlert;
  })();
  var NoSuchCookie = (function () {
      function NoSuchCookie() {

      };
      NoSuchCookie.value = new NoSuchCookie();
      return NoSuchCookie;
  })();
  var NoSuchElement = (function () {
      function NoSuchElement() {

      };
      NoSuchElement.value = new NoSuchElement();
      return NoSuchElement;
  })();
  var NoSuchFrame = (function () {
      function NoSuchFrame() {

      };
      NoSuchFrame.value = new NoSuchFrame();
      return NoSuchFrame;
  })();
  var NoSuchWindow = (function () {
      function NoSuchWindow() {

      };
      NoSuchWindow.value = new NoSuchWindow();
      return NoSuchWindow;
  })();
  var ScriptTimeout = (function () {
      function ScriptTimeout() {

      };
      ScriptTimeout.value = new ScriptTimeout();
      return ScriptTimeout;
  })();
  var SessionNotCreated = (function () {
      function SessionNotCreated() {

      };
      SessionNotCreated.value = new SessionNotCreated();
      return SessionNotCreated;
  })();
  var StaleElementReference = (function () {
      function StaleElementReference() {

      };
      StaleElementReference.value = new StaleElementReference();
      return StaleElementReference;
  })();
  var Timeout = (function () {
      function Timeout() {

      };
      Timeout.value = new Timeout();
      return Timeout;
  })();
  var UnableToSetCookie = (function () {
      function UnableToSetCookie() {

      };
      UnableToSetCookie.value = new UnableToSetCookie();
      return UnableToSetCookie;
  })();
  var UnableToCaptureScreen = (function () {
      function UnableToCaptureScreen() {

      };
      UnableToCaptureScreen.value = new UnableToCaptureScreen();
      return UnableToCaptureScreen;
  })();
  var UnexpectedAlertOpen = (function () {
      function UnexpectedAlertOpen() {

      };
      UnexpectedAlertOpen.value = new UnexpectedAlertOpen();
      return UnexpectedAlertOpen;
  })();
  var UnknownCommand = (function () {
      function UnknownCommand() {

      };
      UnknownCommand.value = new UnknownCommand();
      return UnknownCommand;
  })();
  var UnknownError = (function () {
      function UnknownError() {

      };
      UnknownError.value = new UnknownError();
      return UnknownError;
  })();
  var UnknownMethod = (function () {
      function UnknownMethod() {

      };
      UnknownMethod.value = new UnknownMethod();
      return UnknownMethod;
  })();
  var UnsupportedOperation = (function () {
      function UnsupportedOperation() {

      };
      UnsupportedOperation.value = new UnsupportedOperation();
      return UnsupportedOperation;
  })();
  var unknownError = function (message) {
      return {
          error: UnknownError.value,
          message: message,
          stacktrace: ""
      };
  };
  var fromStringCode = function (v) {
      if (v === "element click intercepted") {
          return new Data_Either.Right(ElementClickIntercepted.value);
      };
      if (v === "element not selectable") {
          return new Data_Either.Right(ElementNotSelectable.value);
      };
      if (v === "element not interactable") {
          return new Data_Either.Right(ElementNotInteractable.value);
      };
      if (v === "insecure certificate") {
          return new Data_Either.Right(InsecureCertificate.value);
      };
      if (v === "invalid argument") {
          return new Data_Either.Right(InvalidArgument.value);
      };
      if (v === "invalid cookie domain") {
          return new Data_Either.Right(InvalidCookieDomain.value);
      };
      if (v === "invalid coordinates") {
          return new Data_Either.Right(InvalidCoordinates.value);
      };
      if (v === "invalid element state") {
          return new Data_Either.Right(InvalidElementState.value);
      };
      if (v === "invalid selector") {
          return new Data_Either.Right(InvalidSelector.value);
      };
      if (v === "invalid session id") {
          return new Data_Either.Right(InvalidSessionId.value);
      };
      if (v === "javascript error") {
          return new Data_Either.Right(JavaScriptError.value);
      };
      if (v === "move target out of bounds") {
          return new Data_Either.Right(MoveTargetOutOfBounds.value);
      };
      if (v === "no such alert") {
          return new Data_Either.Right(NoSuchAlert.value);
      };
      if (v === "no such cookie") {
          return new Data_Either.Right(NoSuchCookie.value);
      };
      if (v === "no such element") {
          return new Data_Either.Right(NoSuchElement.value);
      };
      if (v === "no such frame") {
          return new Data_Either.Right(NoSuchFrame.value);
      };
      if (v === "no such window") {
          return new Data_Either.Right(NoSuchWindow.value);
      };
      if (v === "script timeout") {
          return new Data_Either.Right(ScriptTimeout.value);
      };
      if (v === "session not created") {
          return new Data_Either.Right(SessionNotCreated.value);
      };
      if (v === "stale element reference") {
          return new Data_Either.Right(StaleElementReference.value);
      };
      if (v === "timeout") {
          return new Data_Either.Right(Timeout.value);
      };
      if (v === "unable to set cookie") {
          return new Data_Either.Right(UnableToSetCookie.value);
      };
      if (v === "unable to capture screen") {
          return new Data_Either.Right(UnableToCaptureScreen.value);
      };
      if (v === "unexpected alert open") {
          return new Data_Either.Right(UnexpectedAlertOpen.value);
      };
      if (v === "unknown command") {
          return new Data_Either.Right(UnknownCommand.value);
      };
      if (v === "unknown error") {
          return new Data_Either.Right(UnknownError.value);
      };
      if (v === "unknown method") {
          return new Data_Either.Right(UnknownMethod.value);
      };
      if (v === "unsupported operation") {
          return new Data_Either.Right(UnsupportedOperation.value);
      };
      return new Data_Either.Left(v);
  };
  var fromJson = function (js) {
      return Data_Either.either(unknownError)(Control_Category.id(Control_Category.categoryFn))(Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeStrMap(Data_Argonaut_Decode_Class.decodeJsonJson))(js))(function (v) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeStrMap(Data_Argonaut_Decode_Class.decodeJsonJson))(v)("value"))(function (v1) {
              return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bindFlipped(Data_Either.bindEither)(fromStringCode)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(v1)("error")))(function (v2) {
                  return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(v1)("message"))(function (v3) {
                      return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(v1)("stacktrace"))(function (v4) {
                          return Control_Applicative.pure(Data_Either.applicativeEither)({
                              error: v2,
                              message: v3,
                              stacktrace: v4
                          });
                      });
                  });
              });
          });
      }));
  };
  exports["ElementClickIntercepted"] = ElementClickIntercepted;
  exports["ElementNotSelectable"] = ElementNotSelectable;
  exports["ElementNotInteractable"] = ElementNotInteractable;
  exports["InsecureCertificate"] = InsecureCertificate;
  exports["InvalidArgument"] = InvalidArgument;
  exports["InvalidCookieDomain"] = InvalidCookieDomain;
  exports["InvalidCoordinates"] = InvalidCoordinates;
  exports["InvalidElementState"] = InvalidElementState;
  exports["InvalidSelector"] = InvalidSelector;
  exports["InvalidSessionId"] = InvalidSessionId;
  exports["JavaScriptError"] = JavaScriptError;
  exports["MoveTargetOutOfBounds"] = MoveTargetOutOfBounds;
  exports["NoSuchAlert"] = NoSuchAlert;
  exports["NoSuchCookie"] = NoSuchCookie;
  exports["NoSuchElement"] = NoSuchElement;
  exports["NoSuchFrame"] = NoSuchFrame;
  exports["NoSuchWindow"] = NoSuchWindow;
  exports["ScriptTimeout"] = ScriptTimeout;
  exports["SessionNotCreated"] = SessionNotCreated;
  exports["StaleElementReference"] = StaleElementReference;
  exports["Timeout"] = Timeout;
  exports["UnableToSetCookie"] = UnableToSetCookie;
  exports["UnableToCaptureScreen"] = UnableToCaptureScreen;
  exports["UnexpectedAlertOpen"] = UnexpectedAlertOpen;
  exports["UnknownCommand"] = UnknownCommand;
  exports["UnknownError"] = UnknownError;
  exports["UnknownMethod"] = UnknownMethod;
  exports["UnsupportedOperation"] = UnsupportedOperation;
  exports["fromStringCode"] = fromStringCode;
  exports["fromJson"] = fromJson;
  exports["unknownError"] = unknownError;
})(PS["Lunapark.Error"] = PS["Lunapark.Error"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var CSS_Render = PS["CSS.Render"];
  var CSS_Selector = PS["CSS.Selector"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut = PS["Data.Argonaut"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_Argonaut_Decode_Class = PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Combinators = PS["Data.Argonaut.Decode.Combinators"];
  var Data_Argonaut_Encode_Class = PS["Data.Argonaut.Encode.Class"];
  var Data_Argonaut_Encode_Combinators = PS["Data.Argonaut.Encode.Combinators"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_String = PS["Data.String"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Variant = PS["Data.Variant"];
  var Data_Variant_Internal = PS["Data.Variant.Internal"];
  var Data_XPath_Types = PS["Data.XPath.Types"];
  var Node_Encoding = PS["Node.Encoding"];
  var Node_Path = PS["Node.Path"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];
  var Accept = (function () {
      function Accept() {

      };
      Accept.value = new Accept();
      return Accept;
  })();
  var Dismiss = (function () {
      function Dismiss() {

      };
      Dismiss.value = new Dismiss();
      return Dismiss;
  })();
  var SessionId = function (x) {
      return x;
  };   
  var Windows = (function () {
      function Windows() {

      };
      Windows.value = new Windows();
      return Windows;
  })();
  var Mac = (function () {
      function Mac() {

      };
      Mac.value = new Mac();
      return Mac;
  })();
  var Linux = (function () {
      function Linux() {

      };
      Linux.value = new Linux();
      return Linux;
  })();
  var Any = (function () {
      function Any() {

      };
      Any.value = new Any();
      return Any;
  })();
  var Normal = (function () {
      function Normal() {

      };
      Normal.value = new Normal();
      return Normal;
  })();
  var Eager = (function () {
      function Eager() {

      };
      Eager.value = new Eager();
      return Eager;
  })();
  var Immediate = (function () {
      function Immediate() {

      };
      Immediate.value = new Immediate();
      return Immediate;
  })();
  var Element = function (x) {
      return x;
  };   
  var MSEdge = (function () {
      function MSEdge() {

      };
      MSEdge.value = new MSEdge();
      return MSEdge;
  })();
  var Chrome = (function () {
      function Chrome() {

      };
      Chrome.value = new Chrome();
      return Chrome;
  })();
  var Firefox = (function () {
      function Firefox() {

      };
      Firefox.value = new Firefox();
      return Firefox;
  })();
  var BrowserName = (function () {
      function BrowserName(value0) {
          this.value0 = value0;
      };
      BrowserName.create = function (value0) {
          return new BrowserName(value0);
      };
      return BrowserName;
  })();
  var BrowserVersion = (function () {
      function BrowserVersion(value0) {
          this.value0 = value0;
      };
      BrowserVersion.create = function (value0) {
          return new BrowserVersion(value0);
      };
      return BrowserVersion;
  })();
  var PlatformName = (function () {
      function PlatformName(value0) {
          this.value0 = value0;
      };
      PlatformName.create = function (value0) {
          return new PlatformName(value0);
      };
      return PlatformName;
  })();
  var AcceptInsecureCerts = (function () {
      function AcceptInsecureCerts(value0) {
          this.value0 = value0;
      };
      AcceptInsecureCerts.create = function (value0) {
          return new AcceptInsecureCerts(value0);
      };
      return AcceptInsecureCerts;
  })();
  var PageLoadStrategy = (function () {
      function PageLoadStrategy(value0) {
          this.value0 = value0;
      };
      PageLoadStrategy.create = function (value0) {
          return new PageLoadStrategy(value0);
      };
      return PageLoadStrategy;
  })();
  var DesiredTimeouts = (function () {
      function DesiredTimeouts(value0) {
          this.value0 = value0;
      };
      DesiredTimeouts.create = function (value0) {
          return new DesiredTimeouts(value0);
      };
      return DesiredTimeouts;
  })();
  var UnhandledPromptBehavior = (function () {
      function UnhandledPromptBehavior(value0) {
          this.value0 = value0;
      };
      UnhandledPromptBehavior.create = function (value0) {
          return new UnhandledPromptBehavior(value0);
      };
      return UnhandledPromptBehavior;
  })();
  var CustomCapability = (function () {
      function CustomCapability(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CustomCapability.create = function (value0) {
          return function (value1) {
              return new CustomCapability(value0, value1);
          };
      };
      return CustomCapability;
  })();            
  var newtypeSessionId = new Data_Newtype.Newtype(function (n) {
      return n;
  }, SessionId);
  var newtypeElementId = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Element);
  var encodeTimeouts = function (r) {
      return Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeStrMap(Data_Argonaut_Encode_Class.encodeJsonJNumber))(Data_StrMap.fromFoldable(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("script", Data_Newtype.un(Data_Time_Duration.newtypeMilliseconds)(Data_Time_Duration.Milliseconds)(r.script)), new Data_Tuple.Tuple("pageLoad", Data_Newtype.un(Data_Time_Duration.newtypeMilliseconds)(Data_Time_Duration.Milliseconds)(r.pageLoad)), new Data_Tuple.Tuple("implicit", Data_Newtype.un(Data_Time_Duration.newtypeMilliseconds)(Data_Time_Duration.Milliseconds)(r.implicit)) ]));
  };
  var encodeLegacyTimeouts = function (r) {
      return [ Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeStrMap(Data_Argonaut_Encode_Class.encodeJsonJNumber))(Data_StrMap.singleton("script")(Data_Newtype.un(Data_Time_Duration.newtypeMilliseconds)(Data_Time_Duration.Milliseconds)(r.script))), Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeStrMap(Data_Argonaut_Encode_Class.encodeJsonJNumber))(Data_StrMap.singleton("implicit")(Data_Newtype.un(Data_Time_Duration.newtypeMilliseconds)(Data_Time_Duration.Milliseconds)(r.implicit))), Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeStrMap(Data_Argonaut_Encode_Class.encodeJsonJNumber))(Data_StrMap.singleton("page load")(Data_Newtype.un(Data_Time_Duration.newtypeMilliseconds)(Data_Time_Duration.Milliseconds)(r.pageLoad))) ];
  };
  var encodeCapability = function (v) {
      if (v instanceof BrowserName) {
          return Data_Tuple.Tuple.create("browserName")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)((function () {
              if (v.value0 instanceof MSEdge) {
                  return "MicrosoftEdge";
              };
              if (v.value0 instanceof Chrome) {
                  return "chrome";
              };
              if (v.value0 instanceof Firefox) {
                  return "firefox";
              };
              throw new Error("Failed pattern match at Lunapark.Types line 419, column 55 - line 423, column 3: " + [ v.value0.constructor.name ]);
          })()));
      };
      if (v instanceof BrowserVersion) {
          return Data_Tuple.Tuple.create("browserVersion")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)(v.value0));
      };
      if (v instanceof PlatformName) {
          return Data_Tuple.Tuple.create("platform")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)((function () {
              if (v.value0 instanceof Windows) {
                  return "WINDOWS";
              };
              if (v.value0 instanceof Mac) {
                  return "MAC";
              };
              if (v.value0 instanceof Linux) {
                  return "LINUX";
              };
              if (v.value0 instanceof Any) {
                  return "ANY";
              };
              throw new Error("Failed pattern match at Lunapark.Types line 424, column 53 - line 429, column 3: " + [ v.value0.constructor.name ]);
          })()));
      };
      if (v instanceof AcceptInsecureCerts) {
          return Data_Tuple.Tuple.create("acceptInsecureCerts")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJBoolean)(v.value0));
      };
      if (v instanceof PageLoadStrategy) {
          return Data_Tuple.Tuple.create("pageLoadStrategy")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)((function () {
              if (v.value0 instanceof Normal) {
                  return "normal";
              };
              if (v.value0 instanceof Eager) {
                  return "eager";
              };
              if (v.value0 instanceof Immediate) {
                  return "none";
              };
              throw new Error("Failed pattern match at Lunapark.Types line 430, column 64 - line 434, column 3: " + [ v.value0.constructor.name ]);
          })()));
      };
      if (v instanceof DesiredTimeouts) {
          return Data_Tuple.Tuple.create("timeouts")(encodeTimeouts(v.value0));
      };
      if (v instanceof UnhandledPromptBehavior) {
          return Data_Tuple.Tuple.create("unhandledPromptBehavior")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonJString)((function () {
              if (v.value0 instanceof Accept) {
                  return "accept";
              };
              if (v.value0 instanceof Dismiss) {
                  return "dismiss";
              };
              throw new Error("Failed pattern match at Lunapark.Types line 435, column 78 - line 438, column 3: " + [ v.value0.constructor.name ]);
          })()));
      };
      if (v instanceof CustomCapability) {
          return new Data_Tuple.Tuple(v.value0, v.value1);
      };
      throw new Error("Failed pattern match at Lunapark.Types line 418, column 20 - line 438, column 35: " + [ v.constructor.name ]);
  };
  var encodeCapabilities = function (dictFoldable) {
      return Data_Foldable.foldl(dictFoldable)(function (b) {
          return function (a) {
              return Data_Argonaut_Encode_Combinators.extend(Data_Argonaut_Encode_Class.encodeJsonJson)(encodeCapability(a))(b);
          };
      })(Data_Argonaut_Core.jsonEmptyObject);
  };
  var encodeCapabilitiesRequest = function (r) {
      return Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeStrMap(Data_Argonaut_Encode_Class.encodeStrMap(Data_Argonaut_Encode_Class.encodeJsonJson)))(Data_StrMap.singleton("capabilities")(Data_StrMap.fromFoldable(Data_Foldable.foldableArray)([ Data_Tuple.Tuple.create("alwaysMatch")(encodeCapabilities(Data_Foldable.foldableArray)(r.alwaysMatch)), Data_Tuple.Tuple.create("firstMatch")(Data_Argonaut_Encode_Class.encodeJson(Data_Argonaut_Encode_Class.encodeJsonArray(Data_Argonaut_Encode_Class.encodeJsonJson))(Data_Functor.map(Data_Functor.functorArray)(encodeCapabilities(Data_Foldable.foldableArray))(r.firstMatch))) ])));
  };
  var decodeTimeouts = Control_Bind.composeKleisli(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeStrMap(Data_Argonaut_Decode_Class.decodeJsonJson)))(function (obj) {
      return Control_Bind.bind(Data_Either.bindEither)(Data_Functor.map(Data_Either.functorEither)(Data_Time_Duration.Milliseconds)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonNumber)(obj)("script")))(function (v) {
          return Control_Bind.bind(Data_Either.bindEither)(Data_Functor.map(Data_Either.functorEither)(Data_Time_Duration.Milliseconds)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonNumber)(obj)("pageLoad")))(function (v1) {
              return Control_Bind.bind(Data_Either.bindEither)(Data_Functor.map(Data_Either.functorEither)(Data_Time_Duration.Milliseconds)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonNumber)(obj)("implicit")))(function (v2) {
                  return Control_Applicative.pure(Data_Either.applicativeEither)({
                      script: v,
                      pageLoad: v1,
                      implicit: v2
                  });
              });
          });
      });
  });
  var decodeSessionId = function ($125) {
      return Data_Functor.map(Data_Either.functorEither)(SessionId)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeJsonString)($125));
  };
  var decodeServerStatus = Control_Bind.composeKleisli(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeStrMap(Data_Argonaut_Decode_Class.decodeJsonJson)))(function (obj) {
      return Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(function (v) {
          return function (v1) {
              return {
                  ready: v,
                  message: v1
              };
          };
      })(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonBoolean)(obj)("ready")))(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonString)(obj)("message"));
  });  
  var decodeCapabilities = (function () {
      var decodePrompt = Control_Bind.composeKleisli(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeJsonString))(function (str) {
          var v = Data_String.toLower(str);
          if (v === "accept") {
              return new Data_Either.Right(Accept.value);
          };
          if (v === "dismiss") {
              return new Data_Either.Right(Dismiss.value);
          };
          return new Data_Either.Left("unhandled");
      });
      var decodePageLoadStrategy = Control_Bind.composeKleisli(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeJsonString))(function (str) {
          var v = Data_String.toLower(str);
          if (v === "none") {
              return new Data_Either.Right(Immediate.value);
          };
          if (v === "normal") {
              return new Data_Either.Right(Normal.value);
          };
          if (v === "eager") {
              return new Data_Either.Right(Eager.value);
          };
          return new Data_Either.Left("unhandled");
      });
      var decodeBrowserName = Control_Bind.composeKleisli(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeJsonString))(function (str) {
          var v = Data_String.toLower(str);
          if (v === "microsoftedge") {
              return new Data_Either.Right(MSEdge.value);
          };
          if (v === "chrome") {
              return new Data_Either.Right(Chrome.value);
          };
          if (v === "firefox") {
              return new Data_Either.Right(Firefox.value);
          };
          return new Data_Either.Left("unhandled");
      });
      var decodeCapability = function (v) {
          if (v.value0 === "browserName") {
              return Data_Functor.map(Data_Either.functorEither)(BrowserName.create)(decodeBrowserName(v.value1));
          };
          if (v.value0 === "browserVersion") {
              return Data_Functor.map(Data_Either.functorEither)(BrowserVersion.create)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeJsonString)(v.value1));
          };
          if (v.value0 === "acceptInsecureCerts") {
              return Data_Functor.map(Data_Either.functorEither)(AcceptInsecureCerts.create)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeJsonBoolean)(v.value1));
          };
          if (v.value0 === "pageLoadStrategy") {
              return Data_Functor.map(Data_Either.functorEither)(PageLoadStrategy.create)(decodePageLoadStrategy(v.value1));
          };
          if (v.value0 === "timeouts") {
              return Data_Functor.map(Data_Either.functorEither)(DesiredTimeouts.create)(decodeTimeouts(v.value1));
          };
          if (v.value0 === "unhandledPromptBehaviour") {
              return Data_Functor.map(Data_Either.functorEither)(UnhandledPromptBehavior.create)(decodePrompt(v.value1));
          };
          return new Data_Either.Left("unhandled");
      };
      return Control_Bind.composeKleisli(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeStrMap(Data_Argonaut_Decode_Class.decodeJsonJson)))(function (obj) {
          return Data_Traversable["for"](Data_Either.applicativeEither)(Data_Traversable.traversableArray)(Data_StrMap.toUnfoldable(Data_Unfoldable.unfoldableArray)(obj))(function (v) {
              return Control_Alt.alt(Data_Either.altEither)(decodeCapability(v))(new Data_Either.Right(new CustomCapability(v.value0, v.value1)));
          });
      });
  })();
  var decodeCreateSessionResponse = Control_Bind.composeKleisli(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeStrMap(Data_Argonaut_Decode_Class.decodeJsonJson)))(function (obj) {
      return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bindFlipped(Data_Either.bindEither)(decodeSessionId)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonJson)(obj)("sessionId")))(function (v) {
          return Control_Bind.bind(Data_Either.bindEither)(Control_Bind.bindFlipped(Data_Either.bindEither)(decodeCapabilities)(Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonJson)(obj)("capabilities")))(function (v1) {
              return Control_Applicative.pure(Data_Either.applicativeEither)({
                  session: v,
                  capabilities: v1
              });
          });
      });
  });
  exports["SessionId"] = SessionId;
  exports["Element"] = Element;
  exports["decodeSessionId"] = decodeSessionId;
  exports["decodeCreateSessionResponse"] = decodeCreateSessionResponse;
  exports["decodeServerStatus"] = decodeServerStatus;
  exports["decodeTimeouts"] = decodeTimeouts;
  exports["encodeTimeouts"] = encodeTimeouts;
  exports["encodeLegacyTimeouts"] = encodeLegacyTimeouts;
  exports["MSEdge"] = MSEdge;
  exports["Chrome"] = Chrome;
  exports["Firefox"] = Firefox;
  exports["Normal"] = Normal;
  exports["Eager"] = Eager;
  exports["Immediate"] = Immediate;
  exports["Accept"] = Accept;
  exports["Dismiss"] = Dismiss;
  exports["Windows"] = Windows;
  exports["Mac"] = Mac;
  exports["Linux"] = Linux;
  exports["Any"] = Any;
  exports["BrowserName"] = BrowserName;
  exports["BrowserVersion"] = BrowserVersion;
  exports["PlatformName"] = PlatformName;
  exports["AcceptInsecureCerts"] = AcceptInsecureCerts;
  exports["PageLoadStrategy"] = PageLoadStrategy;
  exports["DesiredTimeouts"] = DesiredTimeouts;
  exports["UnhandledPromptBehavior"] = UnhandledPromptBehavior;
  exports["CustomCapability"] = CustomCapability;
  exports["encodeCapability"] = encodeCapability;
  exports["encodeCapabilities"] = encodeCapabilities;
  exports["decodeCapabilities"] = decodeCapabilities;
  exports["encodeCapabilitiesRequest"] = encodeCapabilitiesRequest;
  exports["newtypeSessionId"] = newtypeSessionId;
  exports["newtypeElementId"] = newtypeElementId;
})(PS["Lunapark.Types"] = PS["Lunapark.Types"] || {});
(function(exports) {
  /* global exports */
  /* global XMLHttpRequest */
  /* global module */
  /* global process */
  "use strict";

  exports._ajax = function () {
    var platformSpecific = { };
    if (typeof module !== "undefined" && module.require && !(typeof process !== "undefined" && process.versions["electron"])) {
      // We are on node.js
      platformSpecific.newXHR = function () {
        var XHR = module.require("xhr2");
        return new XHR();
      };

      platformSpecific.fixupUrl = function (url) {
        var urllib = module.require("url");
        var u = urllib.parse(url);
        u.protocol = u.protocol || "http:";
        u.hostname = u.hostname || "localhost";
        return urllib.format(u);
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    } else {
      // We are in the browser
      platformSpecific.newXHR = function () {
        return new XMLHttpRequest();
      };

      platformSpecific.fixupUrl = function (url) {
        return url || "/";
      };

      platformSpecific.getResponse = function (xhr) {
        return xhr.response;
      };
    }

    return function (mkHeader, options) {
      return function (errback, callback) {
        var xhr = platformSpecific.newXHR();
        var fixedUrl = platformSpecific.fixupUrl(options.url);
        xhr.open(options.method || "GET", fixedUrl, true, options.username, options.password);
        if (options.headers) {
          try {
            for (var i = 0, header; (header = options.headers[i]) != null; i++) {
              xhr.setRequestHeader(header.field, header.value);
            }
          } catch (e) {
            errback(e);
          }
        }
        xhr.onerror = function () {
          errback(new Error("AJAX request failed: " + options.method + " " + options.url));
        };
        xhr.onload = function () {
          callback({
            status: xhr.status,
            headers: xhr.getAllResponseHeaders().split("\r\n")
              .filter(function (header) {
                return header.length > 0;
              })
              .map(function (header) {
                var i = header.indexOf(":");
                return mkHeader(header.substring(0, i))(header.substring(i + 2));
              }),
            response: platformSpecific.getResponse(xhr)
          });
        };
        xhr.responseType = options.responseType;
        xhr.withCredentials = options.withCredentials;
        xhr.send(options.content);

        return function (/* error */) {
          return function (cancelErrback, cancelCallback) {
            try {
              xhr.abort();
            } catch (e) {
              return cancelErrback(e);
            }
            return cancelCallback();
          };
        };
      };
    };
  }();
})(PS["Network.HTTP.Affjax"] = PS["Network.HTTP.Affjax"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var DOM_XHR_Types = PS["DOM.XHR.Types"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_FormURLEncoded = PS["Data.FormURLEncoded"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_MediaType_Common = PS["Data.MediaType.Common"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var Requestable = function (toRequest) {
      this.toRequest = toRequest;
  };
  var toRequest = function (dict) {
      return dict.toRequest;
  };
  var requestableJson = new Requestable(function (json) {
      return new Data_Tuple.Tuple(new Data_Maybe.Just(Data_MediaType_Common.applicationJSON), Data_Show.show(Data_Argonaut_Core.showJson)(json));
  });
  var defaultToRequest = function ($0) {
      return Data_Tuple.Tuple.create(Data_Maybe.Nothing.value)($0);
  };                                                                   
  var requestableUnit = new Requestable(defaultToRequest);
  exports["Requestable"] = Requestable;
  exports["toRequest"] = toRequest;
  exports["requestableJson"] = requestableJson;
  exports["requestableUnit"] = requestableUnit;
})(PS["Network.HTTP.Affjax.Request"] = PS["Network.HTTP.Affjax.Request"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_File_Types = PS["DOM.File.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Argonaut_Core = PS["Data.Argonaut.Core"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_MediaType_Common = PS["Data.MediaType.Common"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var ArrayBufferResponse = (function () {
      function ArrayBufferResponse() {

      };
      ArrayBufferResponse.value = new ArrayBufferResponse();
      return ArrayBufferResponse;
  })();
  var BlobResponse = (function () {
      function BlobResponse() {

      };
      BlobResponse.value = new BlobResponse();
      return BlobResponse;
  })();
  var DocumentResponse = (function () {
      function DocumentResponse() {

      };
      DocumentResponse.value = new DocumentResponse();
      return DocumentResponse;
  })();
  var JSONResponse = (function () {
      function JSONResponse() {

      };
      JSONResponse.value = new JSONResponse();
      return JSONResponse;
  })();
  var StringResponse = (function () {
      function StringResponse() {

      };
      StringResponse.value = new StringResponse();
      return StringResponse;
  })();
  var Respondable = function (fromResponse, responseType) {
      this.fromResponse = fromResponse;
      this.responseType = responseType;
  }; 
  var responseTypeToString = function (v) {
      if (v instanceof ArrayBufferResponse) {
          return "arraybuffer";
      };
      if (v instanceof BlobResponse) {
          return "blob";
      };
      if (v instanceof DocumentResponse) {
          return "document";
      };
      if (v instanceof JSONResponse) {
          return "text";
      };
      if (v instanceof StringResponse) {
          return "text";
      };
      throw new Error("Failed pattern match at Network.HTTP.Affjax.Response line 48, column 1 - line 48, column 61: " + [ v.constructor.name ]);
  };
  var responseType = function (dict) {
      return dict.responseType;
  };                                                                                                                                     
  var responsableJson = new Respondable(function ($8) {
      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($8);
  }, new Data_Tuple.Tuple(new Data_Maybe.Just(Data_MediaType_Common.applicationJSON), JSONResponse.value));                                                             
  var fromResponse = function (dict) {
      return dict.fromResponse;
  };
  exports["ArrayBufferResponse"] = ArrayBufferResponse;
  exports["BlobResponse"] = BlobResponse;
  exports["DocumentResponse"] = DocumentResponse;
  exports["JSONResponse"] = JSONResponse;
  exports["StringResponse"] = StringResponse;
  exports["responseTypeToString"] = responseTypeToString;
  exports["Respondable"] = Respondable;
  exports["responseType"] = responseType;
  exports["fromResponse"] = fromResponse;
  exports["responsableJson"] = responsableJson;
})(PS["Network.HTTP.Affjax.Response"] = PS["Network.HTTP.Affjax.Response"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Accept = (function () {
      function Accept(value0) {
          this.value0 = value0;
      };
      Accept.create = function (value0) {
          return new Accept(value0);
      };
      return Accept;
  })();
  var ContentType = (function () {
      function ContentType(value0) {
          this.value0 = value0;
      };
      ContentType.create = function (value0) {
          return new ContentType(value0);
      };
      return ContentType;
  })();
  var RequestHeader = (function () {
      function RequestHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      RequestHeader.create = function (value0) {
          return function (value1) {
              return new RequestHeader(value0, value1);
          };
      };
      return RequestHeader;
  })();
  var requestHeaderValue = function (v) {
      if (v instanceof Accept) {
          return Data_Newtype.unwrap(Data_MediaType.newtypeMediaType)(v.value0);
      };
      if (v instanceof ContentType) {
          return Data_Newtype.unwrap(Data_MediaType.newtypeMediaType)(v.value0);
      };
      if (v instanceof RequestHeader) {
          return v.value1;
      };
      throw new Error("Failed pattern match at Network.HTTP.RequestHeader line 29, column 1 - line 29, column 46: " + [ v.constructor.name ]);
  };
  var requestHeaderName = function (v) {
      if (v instanceof Accept) {
          return "Accept";
      };
      if (v instanceof ContentType) {
          return "Content-Type";
      };
      if (v instanceof RequestHeader) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Network.HTTP.RequestHeader line 24, column 1 - line 24, column 45: " + [ v.constructor.name ]);
  };
  exports["Accept"] = Accept;
  exports["ContentType"] = ContentType;
  exports["RequestHeader"] = RequestHeader;
  exports["requestHeaderName"] = requestHeaderName;
  exports["requestHeaderValue"] = requestHeaderValue;
})(PS["Network.HTTP.RequestHeader"] = PS["Network.HTTP.RequestHeader"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var ResponseHeader = (function () {
      function ResponseHeader(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ResponseHeader.create = function (value0) {
          return function (value1) {
              return new ResponseHeader(value0, value1);
          };
      };
      return ResponseHeader;
  })();
  var responseHeader = function (field) {
      return function (value) {
          return new ResponseHeader(field, value);
      };
  };
  exports["responseHeader"] = responseHeader;
})(PS["Network.HTTP.ResponseHeader"] = PS["Network.HTTP.ResponseHeader"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Network.HTTP.Affjax"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_Compat = PS["Control.Monad.Aff.Compat"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut_Parser = PS["Data.Argonaut.Parser"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HTTP_Method = PS["Data.HTTP.Method"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Tuple = PS["Data.Tuple"];
  var $$Math = PS["Math"];
  var Network_HTTP_Affjax_Request = PS["Network.HTTP.Affjax.Request"];
  var Network_HTTP_Affjax_Response = PS["Network.HTTP.Affjax.Response"];
  var Network_HTTP_RequestHeader = PS["Network.HTTP.RequestHeader"];
  var Network_HTTP_ResponseHeader = PS["Network.HTTP.ResponseHeader"];
  var Network_HTTP_StatusCode = PS["Network.HTTP.StatusCode"];
  var Prelude = PS["Prelude"];
  var defaultRequest = {
      method: new Data_Either.Left(Data_HTTP_Method.GET.value),
      url: "/",
      headers: [  ],
      content: Data_Maybe.Nothing.value,
      username: Data_Maybe.Nothing.value,
      password: Data_Maybe.Nothing.value,
      withCredentials: false
  };
  var affjax = function (dictRequestable) {
      return function (dictRespondable) {
          return function (req) {
              var responseSettings = Network_HTTP_Affjax_Response.responseType(dictRespondable);
              var requestSettings = (function () {
                  var v = Data_Functor.map(Data_Maybe.functorMaybe)(Network_HTTP_Affjax_Request.toRequest(dictRequestable))(req.content);
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, Data_Maybe.Nothing.value);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Tuple.Tuple(v.value0.value0, new Data_Maybe.Just(v.value0.value1));
                  };
                  throw new Error("Failed pattern match at Network.HTTP.Affjax line 250, column 21 - line 252, column 49: " + [ v.constructor.name ]);
              })();
              var parseJSON = function ($98) {
                  return Data_Either.either(function ($99) {
                      return Data_Foreign.fail(Data_Foreign.JSONError.create($99));
                  })(function ($100) {
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Foreign.toForeign($100));
                  })(Data_Argonaut_Parser.jsonParser($98));
              };
              var fromResponse$prime = (function () {
                  var v = Data_Tuple.snd(responseSettings);
                  if (v instanceof Network_HTTP_Affjax_Response.JSONResponse) {
                      return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Network_HTTP_Affjax_Response.fromResponse(dictRespondable))(Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(parseJSON)(Data_Foreign.readString));
                  };
                  return Network_HTTP_Affjax_Response.fromResponse(dictRespondable);
              })();
              var addHeader = function (mh) {
                  return function (hs) {
                      if (mh instanceof Data_Maybe.Just && !Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Function.on(Data_Eq.eq(Data_Eq.eqString))(Network_HTTP_RequestHeader.requestHeaderName)(mh.value0))(hs)) {
                          return Data_Array.snoc(hs)(mh.value0);
                      };
                      return hs;
                  };
              };
              var headers = addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Network_HTTP_RequestHeader.ContentType.create)(Data_Tuple.fst(requestSettings)))(addHeader(Data_Functor.map(Data_Maybe.functorMaybe)(Network_HTTP_RequestHeader.Accept.create)(Data_Tuple.fst(responseSettings)))(req.headers));
              var req$prime = {
                  method: Data_HTTP_Method.print(req.method),
                  url: req.url,
                  headers: Data_Functor.map(Data_Functor.functorArray)(function (h) {
                      return {
                          field: Network_HTTP_RequestHeader.requestHeaderName(h),
                          value: Network_HTTP_RequestHeader.requestHeaderValue(h)
                      };
                  })(headers),
                  content: Data_Nullable.toNullable(Data_Tuple.snd(requestSettings)),
                  responseType: Network_HTTP_Affjax_Response.responseTypeToString(Data_Tuple.snd(responseSettings)),
                  username: Data_Nullable.toNullable(req.username),
                  password: Data_Nullable.toNullable(req.password),
                  withCredentials: req.withCredentials
              };
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_Compat.fromEffFnAff($foreign._ajax(Network_HTTP_ResponseHeader.responseHeader, req$prime)))(function (v) {
                  var v1 = Data_Functor.map(Data_Either.functorEither)(function (v2) {
                      var $68 = {};
                      for (var $69 in v) {
                          if ({}.hasOwnProperty.call(v, $69)) {
                              $68[$69] = v[$69];
                          };
                      };
                      $68.response = v2;
                      return $68;
                  })(Control_Monad_Except.runExcept(fromResponse$prime(v.response)));
                  if (v1 instanceof Data_Either.Left) {
                      return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error(Data_Show.show(Data_List_Types.showNonEmptyList(Data_Foreign.showForeignError))(v1.value0)));
                  };
                  if (v1 instanceof Data_Either.Right) {
                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v1.value0);
                  };
                  throw new Error("Failed pattern match at Network.HTTP.Affjax line 232, column 3 - line 234, column 28: " + [ v1.constructor.name ]);
              });
          };
      };
  };
  var $$delete = function (dictRespondable) {
      return function (u) {
          return affjax(Network_HTTP_Affjax_Request.requestableUnit)(dictRespondable)((function () {
              var $74 = {};
              for (var $75 in defaultRequest) {
                  if ({}.hasOwnProperty.call(defaultRequest, $75)) {
                      $74[$75] = defaultRequest[$75];
                  };
              };
              $74.method = new Data_Either.Left(Data_HTTP_Method.DELETE.value);
              $74.url = u;
              return $74;
          })());
      };
  };                                                                   
  var get = function (dictRespondable) {
      return function (u) {
          return affjax(Network_HTTP_Affjax_Request.requestableUnit)(dictRespondable)((function () {
              var $77 = {};
              for (var $78 in defaultRequest) {
                  if ({}.hasOwnProperty.call(defaultRequest, $78)) {
                      $77[$78] = defaultRequest[$78];
                  };
              };
              $77.url = u;
              return $77;
          })());
      };
  };
  var post = function (dictRequestable) {
      return function (dictRespondable) {
          return function (u) {
              return function (c) {
                  return affjax(dictRequestable)(dictRespondable)((function () {
                      var $86 = {};
                      for (var $87 in defaultRequest) {
                          if ({}.hasOwnProperty.call(defaultRequest, $87)) {
                              $86[$87] = defaultRequest[$87];
                          };
                      };
                      $86.method = new Data_Either.Left(Data_HTTP_Method.POST.value);
                      $86.url = u;
                      $86.content = new Data_Maybe.Just(c);
                      return $86;
                  })());
              };
          };
      };
  };
  var post$prime = function (dictRequestable) {
      return function (dictRespondable) {
          return function (u) {
              return function (c) {
                  return affjax(dictRequestable)(dictRespondable)((function () {
                      var $89 = {};
                      for (var $90 in defaultRequest) {
                          if ({}.hasOwnProperty.call(defaultRequest, $90)) {
                              $89[$90] = defaultRequest[$90];
                          };
                      };
                      $89.method = new Data_Either.Left(Data_HTTP_Method.POST.value);
                      $89.url = u;
                      $89.content = c;
                      return $89;
                  })());
              };
          };
      };
  };
  exports["defaultRequest"] = defaultRequest;
  exports["affjax"] = affjax;
  exports["get"] = get;
  exports["post"] = post;
  exports["post'"] = post$prime;
  exports["delete"] = $$delete;
})(PS["Network.HTTP.Affjax"] = PS["Network.HTTP.Affjax"] || {});
(function(exports) {
    "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Data_Argonaut = PS["Data.Argonaut"];
  var Data_Argonaut_Decode_Class = PS["Data.Argonaut.Decode.Class"];
  var Data_Argonaut_Decode_Combinators = PS["Data.Argonaut.Decode.Combinators"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Lunapark_Error = PS["Lunapark.Error"];
  var Lunapark_Types = PS["Lunapark.Types"];
  var Network_HTTP_Affjax = PS["Network.HTTP.Affjax"];
  var Network_HTTP_Affjax_Request = PS["Network.HTTP.Affjax.Request"];
  var Network_HTTP_Affjax_Response = PS["Network.HTTP.Affjax.Response"];
  var Network_HTTP_StatusCode = PS["Network.HTTP.StatusCode"];
  var Prelude = PS["Prelude"];        

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Session = (function () {
      function Session() {

      };
      Session.value = new Session();
      return Session;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var InSession = (function () {
      function InSession(value0) {
          this.value0 = value0;
      };
      InSession.create = function (value0) {
          return new InSession(value0);
      };
      return InSession;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Status = (function () {
      function Status() {

      };
      Status.value = new Status();
      return Status;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Timeouts = (function () {
      function Timeouts() {

      };
      Timeouts.value = new Timeouts();
      return Timeouts;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Url = (function () {
      function Url() {

      };
      Url.value = new Url();
      return Url;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Back = (function () {
      function Back() {

      };
      Back.value = new Back();
      return Back;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Forward = (function () {
      function Forward() {

      };
      Forward.value = new Forward();
      return Forward;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Refresh = (function () {
      function Refresh() {

      };
      Refresh.value = new Refresh();
      return Refresh;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Title = (function () {
      function Title() {

      };
      Title.value = new Title();
      return Title;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Window = (function () {
      function Window() {

      };
      Window.value = new Window();
      return Window;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Handles = (function () {
      function Handles() {

      };
      Handles.value = new Handles();
      return Handles;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Frame = (function () {
      function Frame() {

      };
      Frame.value = new Frame();
      return Frame;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Parent = (function () {
      function Parent() {

      };
      Parent.value = new Parent();
      return Parent;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Rect = (function () {
      function Rect() {

      };
      Rect.value = new Rect();
      return Rect;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Maximize = (function () {
      function Maximize() {

      };
      Maximize.value = new Maximize();
      return Maximize;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Minimize = (function () {
      function Minimize() {

      };
      Minimize.value = new Minimize();
      return Minimize;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Fullscreen = (function () {
      function Fullscreen() {

      };
      Fullscreen.value = new Fullscreen();
      return Fullscreen;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Element = (function () {
      function Element() {

      };
      Element.value = new Element();
      return Element;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Elements = (function () {
      function Elements() {

      };
      Elements.value = new Elements();
      return Elements;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var InElement = (function () {
      function InElement(value0) {
          this.value0 = value0;
      };
      InElement.create = function (value0) {
          return new InElement(value0);
      };
      return InElement;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Active = (function () {
      function Active() {

      };
      Active.value = new Active();
      return Active;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Selected = (function () {
      function Selected() {

      };
      Selected.value = new Selected();
      return Selected;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Attribute = (function () {
      function Attribute(value0) {
          this.value0 = value0;
      };
      Attribute.create = function (value0) {
          return new Attribute(value0);
      };
      return Attribute;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Property = (function () {
      function Property(value0) {
          this.value0 = value0;
      };
      Property.create = function (value0) {
          return new Property(value0);
      };
      return Property;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var CssValue = (function () {
      function CssValue(value0) {
          this.value0 = value0;
      };
      CssValue.create = function (value0) {
          return new CssValue(value0);
      };
      return CssValue;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Text = (function () {
      function Text() {

      };
      Text.value = new Text();
      return Text;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Name = (function () {
      function Name() {

      };
      Name.value = new Name();
      return Name;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Enabled = (function () {
      function Enabled() {

      };
      Enabled.value = new Enabled();
      return Enabled;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Click = (function () {
      function Click() {

      };
      Click.value = new Click();
      return Click;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Clear = (function () {
      function Clear() {

      };
      Clear.value = new Clear();
      return Clear;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Value = (function () {
      function Value() {

      };
      Value.value = new Value();
      return Value;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Source = (function () {
      function Source() {

      };
      Source.value = new Source();
      return Source;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Execute = (function () {
      function Execute() {

      };
      Execute.value = new Execute();
      return Execute;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Sync = (function () {
      function Sync() {

      };
      Sync.value = new Sync();
      return Sync;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Async = (function () {
      function Async() {

      };
      Async.value = new Async();
      return Async;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Cookies = (function () {
      function Cookies() {

      };
      Cookies.value = new Cookies();
      return Cookies;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Cookie = (function () {
      function Cookie(value0) {
          this.value0 = value0;
      };
      Cookie.create = function (value0) {
          return new Cookie(value0);
      };
      return Cookie;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Actions = (function () {
      function Actions() {

      };
      Actions.value = new Actions();
      return Actions;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Alert = (function () {
      function Alert() {

      };
      Alert.value = new Alert();
      return Alert;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Dismiss = (function () {
      function Dismiss() {

      };
      Dismiss.value = new Dismiss();
      return Dismiss;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Accept = (function () {
      function Accept() {

      };
      Accept.value = new Accept();
      return Accept;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Screenshot = (function () {
      function Screenshot() {

      };
      Screenshot.value = new Screenshot();
      return Screenshot;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Displayed = (function () {
      function Displayed() {

      };
      Displayed.value = new Displayed();
      return Displayed;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var AsyncScript = (function () {
      function AsyncScript() {

      };
      AsyncScript.value = new AsyncScript();
      return AsyncScript;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Sessions = (function () {
      function Sessions() {

      };
      Sessions.value = new Sessions();
      return Sessions;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var WindowHandle = (function () {
      function WindowHandle() {

      };
      WindowHandle.value = new WindowHandle();
      return WindowHandle;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var ExecuteAsync = (function () {
      function ExecuteAsync() {

      };
      ExecuteAsync.value = new ExecuteAsync();
      return ExecuteAsync;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Size = (function () {
      function Size() {

      };
      Size.value = new Size();
      return Size;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Position = (function () {
      function Position() {

      };
      Position.value = new Position();
      return Position;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Submit = (function () {
      function Submit() {

      };
      Submit.value = new Submit();
      return Submit;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Keys = (function () {
      function Keys() {

      };
      Keys.value = new Keys();
      return Keys;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Location = (function () {
      function Location() {

      };
      Location.value = new Location();
      return Location;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var AlertText = (function () {
      function AlertText() {

      };
      AlertText.value = new AlertText();
      return AlertText;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var AcceptAlert = (function () {
      function AcceptAlert() {

      };
      AcceptAlert.value = new AcceptAlert();
      return AcceptAlert;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var DismissAlert = (function () {
      function DismissAlert() {

      };
      DismissAlert.value = new DismissAlert();
      return DismissAlert;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var MoveTo = (function () {
      function MoveTo() {

      };
      MoveTo.value = new MoveTo();
      return MoveTo;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var ButtonDown = (function () {
      function ButtonDown() {

      };
      ButtonDown.value = new ButtonDown();
      return ButtonDown;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var ButtonUp = (function () {
      function ButtonUp() {

      };
      ButtonUp.value = new ButtonUp();
      return ButtonUp;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var DoubleClick = (function () {
      function DoubleClick() {

      };
      DoubleClick.value = new DoubleClick();
      return DoubleClick;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Touch = (function () {
      function Touch() {

      };
      Touch.value = new Touch();
      return Touch;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Down = (function () {
      function Down() {

      };
      Down.value = new Down();
      return Down;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Up = (function () {
      function Up() {

      };
      Up.value = new Up();
      return Up;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Move = (function () {
      function Move() {

      };
      Move.value = new Move();
      return Move;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Scroll = (function () {
      function Scroll() {

      };
      Scroll.value = new Scroll();
      return Scroll;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var LongClick = (function () {
      function LongClick() {

      };
      LongClick.value = new LongClick();
      return LongClick;
  })();

  // | Building whole endpoint leads to having tons of noizy things like `ElementFindElement` and `TouchClick`
  // | Making this a `Variant` is definitely overkill
  // | So, to have something like `/session/:sessId/element/:elId/doubleclick` we have
  // | `InSession sessId : InElement elId : DoubleClick : Nil`
  // | This is not as typesafe as it could be, but at least it saves from typos.
  var Flick = (function () {
      function Flick() {

      };
      Flick.value = new Flick();
      return Flick;
  })();
  var printPart = function (v) {
      if (v instanceof Session) {
          return "session";
      };
      if (v instanceof InSession) {
          return "session/" + Data_Newtype.un(Lunapark_Types.newtypeSessionId)(Lunapark_Types.SessionId)(v.value0);
      };
      if (v instanceof Status) {
          return "status";
      };
      if (v instanceof Timeouts) {
          return "timeouts";
      };
      if (v instanceof Url) {
          return "url";
      };
      if (v instanceof Back) {
          return "back";
      };
      if (v instanceof Forward) {
          return "forward";
      };
      if (v instanceof Refresh) {
          return "refresh";
      };
      if (v instanceof Title) {
          return "title";
      };
      if (v instanceof Window) {
          return "window";
      };
      if (v instanceof Handles) {
          return "handles";
      };
      if (v instanceof Frame) {
          return "frame";
      };
      if (v instanceof Parent) {
          return "parent";
      };
      if (v instanceof Rect) {
          return "rect";
      };
      if (v instanceof Maximize) {
          return "maximize";
      };
      if (v instanceof Minimize) {
          return "minimize";
      };
      if (v instanceof Fullscreen) {
          return "fullscreen";
      };
      if (v instanceof Element) {
          return "element";
      };
      if (v instanceof Elements) {
          return "elements";
      };
      if (v instanceof InElement) {
          return "element/" + Data_Newtype.un(Lunapark_Types.newtypeElementId)(Lunapark_Types.Element)(v.value0);
      };
      if (v instanceof Active) {
          return "active";
      };
      if (v instanceof Attribute) {
          return "attribute/" + v.value0;
      };
      if (v instanceof Property) {
          return "property/" + v.value0;
      };
      if (v instanceof CssValue) {
          return "css/" + v.value0;
      };
      if (v instanceof Selected) {
          return "selected";
      };
      if (v instanceof Text) {
          return "text";
      };
      if (v instanceof Name) {
          return "name";
      };
      if (v instanceof Enabled) {
          return "enabled";
      };
      if (v instanceof Click) {
          return "click";
      };
      if (v instanceof Clear) {
          return "clear";
      };
      if (v instanceof Value) {
          return "value";
      };
      if (v instanceof Source) {
          return "source";
      };
      if (v instanceof Execute) {
          return "execute";
      };
      if (v instanceof Sync) {
          return "sync";
      };
      if (v instanceof Async) {
          return "async";
      };
      if (v instanceof Cookies) {
          return "cookie";
      };
      if (v instanceof Cookie) {
          return "cookie/" + v.value0;
      };
      if (v instanceof Actions) {
          return "actions";
      };
      if (v instanceof Alert) {
          return "alert";
      };
      if (v instanceof Dismiss) {
          return "dismiss";
      };
      if (v instanceof Accept) {
          return "accept";
      };
      if (v instanceof Screenshot) {
          return "screenshot";
      };
      if (v instanceof Displayed) {
          return "displayed";
      };
      if (v instanceof AsyncScript) {
          return "async_script";
      };
      if (v instanceof Sessions) {
          return "sessions";
      };
      if (v instanceof WindowHandle) {
          return "window_handle";
      };
      if (v instanceof ExecuteAsync) {
          return "execute_async";
      };
      if (v instanceof Size) {
          return "size";
      };
      if (v instanceof Position) {
          return "position";
      };
      if (v instanceof Submit) {
          return "submit";
      };
      if (v instanceof Keys) {
          return "keys";
      };
      if (v instanceof AlertText) {
          return "alert_text";
      };
      if (v instanceof AcceptAlert) {
          return "accept_alert";
      };
      if (v instanceof MoveTo) {
          return "moveto";
      };
      if (v instanceof Location) {
          return "location";
      };
      if (v instanceof DismissAlert) {
          return "dismiss_alert";
      };
      if (v instanceof ButtonDown) {
          return "buttondown";
      };
      if (v instanceof ButtonUp) {
          return "buttonup";
      };
      if (v instanceof DoubleClick) {
          return "doubleclick";
      };
      if (v instanceof Touch) {
          return "touch";
      };
      if (v instanceof Down) {
          return "down";
      };
      if (v instanceof Up) {
          return "up";
      };
      if (v instanceof Move) {
          return "move";
      };
      if (v instanceof Scroll) {
          return "scroll";
      };
      if (v instanceof LongClick) {
          return "longclick";
      };
      if (v instanceof Flick) {
          return "flick";
      };
      throw new Error("Failed pattern match at Lunapark.Endpoint line 100, column 13 - line 168, column 1: " + [ v.constructor.name ]);
  };
  var print = function (ps) {
      return "/" + Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)("/")(Data_Functor.map(Data_List_Types.functorList)(printPart)(ps));
  };
  var handleAPIError = function (r) {
      if (r.status === 200) {
          return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Lunapark_Error.unknownError)(Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Decode_Class.decodeJson(Data_Argonaut_Decode_Class.decodeStrMap(Data_Argonaut_Decode_Class.decodeJsonJson))(r.response))(function (v) {
              return Data_Argonaut_Decode_Combinators.getField(Data_Argonaut_Decode_Class.decodeJsonJson)(v)("value");
          }));
      };
      return Data_Either.Left.create(Lunapark_Error.fromJson(r.response));
  };
  var post = function (uri) {
      return function (ep) {
          return function (obj) {
              return Data_Functor.map(Control_Monad_Aff.functorAff)(handleAPIError)(Network_HTTP_Affjax.post(Network_HTTP_Affjax_Request.requestableJson)(Network_HTTP_Affjax_Response.responsableJson)(uri + print(ep))(obj));
          };
      };
  };
  var post_ = function (uri) {
      return function (ep) {
          return Data_Functor.map(Control_Monad_Aff.functorAff)(handleAPIError)(Network_HTTP_Affjax["post'"](Network_HTTP_Affjax_Request.requestableUnit)(Network_HTTP_Affjax_Response.responsableJson)(uri + print(ep))(Data_Maybe.Nothing.value));
      };
  };
  var get = function (uri) {
      return function (ep) {
          return Data_Functor.map(Control_Monad_Aff.functorAff)(handleAPIError)(Network_HTTP_Affjax.get(Network_HTTP_Affjax_Response.responsableJson)(uri + print(ep)));
      };
  };
  var $$delete = function (uri) {
      return function (ep) {
          return Data_Functor.map(Control_Monad_Aff.functorAff)(handleAPIError)(Network_HTTP_Affjax["delete"](Network_HTTP_Affjax_Response.responsableJson)(uri + print(ep)));
      };
  };
  exports["Session"] = Session;
  exports["InSession"] = InSession;
  exports["Status"] = Status;
  exports["Timeouts"] = Timeouts;
  exports["Url"] = Url;
  exports["Back"] = Back;
  exports["Forward"] = Forward;
  exports["Refresh"] = Refresh;
  exports["Title"] = Title;
  exports["Window"] = Window;
  exports["Handles"] = Handles;
  exports["Frame"] = Frame;
  exports["Parent"] = Parent;
  exports["Rect"] = Rect;
  exports["Maximize"] = Maximize;
  exports["Minimize"] = Minimize;
  exports["Fullscreen"] = Fullscreen;
  exports["Element"] = Element;
  exports["Elements"] = Elements;
  exports["InElement"] = InElement;
  exports["Active"] = Active;
  exports["Selected"] = Selected;
  exports["Attribute"] = Attribute;
  exports["Property"] = Property;
  exports["CssValue"] = CssValue;
  exports["Text"] = Text;
  exports["Name"] = Name;
  exports["Enabled"] = Enabled;
  exports["Click"] = Click;
  exports["Clear"] = Clear;
  exports["Value"] = Value;
  exports["Source"] = Source;
  exports["Execute"] = Execute;
  exports["Sync"] = Sync;
  exports["Async"] = Async;
  exports["Cookies"] = Cookies;
  exports["Cookie"] = Cookie;
  exports["Actions"] = Actions;
  exports["Alert"] = Alert;
  exports["Dismiss"] = Dismiss;
  exports["Accept"] = Accept;
  exports["Screenshot"] = Screenshot;
  exports["Displayed"] = Displayed;
  exports["AsyncScript"] = AsyncScript;
  exports["Sessions"] = Sessions;
  exports["WindowHandle"] = WindowHandle;
  exports["ExecuteAsync"] = ExecuteAsync;
  exports["Size"] = Size;
  exports["Position"] = Position;
  exports["Submit"] = Submit;
  exports["Keys"] = Keys;
  exports["Location"] = Location;
  exports["AlertText"] = AlertText;
  exports["AcceptAlert"] = AcceptAlert;
  exports["DismissAlert"] = DismissAlert;
  exports["MoveTo"] = MoveTo;
  exports["ButtonDown"] = ButtonDown;
  exports["ButtonUp"] = ButtonUp;
  exports["DoubleClick"] = DoubleClick;
  exports["Touch"] = Touch;
  exports["Down"] = Down;
  exports["Up"] = Up;
  exports["Move"] = Move;
  exports["Scroll"] = Scroll;
  exports["LongClick"] = LongClick;
  exports["Flick"] = Flick;
  exports["print"] = print;
  exports["printPart"] = printPart;
  exports["handleAPIError"] = handleAPIError;
  exports["get"] = get;
  exports["post"] = post;
  exports["post_"] = post_;
  exports["delete"] = $$delete;
})(PS["Lunapark.Endpoint"] = PS["Lunapark.Endpoint"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_Class = PS["Control.Monad.Aff.Class"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Variant = PS["Data.Functor.Variant"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Variant_Internal = PS["Data.Variant.Internal"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Run_Internal = PS["Run.Internal"];
  var Type_Equality = PS["Type.Equality"];
  var Type_Row = PS["Type.Row"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var Run = function (x) {
      return x;
  };
  var send = function ($44) {
      return Run(Control_Monad_Free.liftF($44));
  };
  var newtypeRun = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Run);
  var resume = function (k1) {
      return function (k2) {
          return function ($45) {
              return Control_Monad_Free["resume'"](function (x) {
                  return function (f) {
                      return k1(Data_Functor.map(Data_Functor_Variant.functorVariantF)(function ($46) {
                          return Run(f($46));
                      })(x));
                  };
              })(k2)(Data_Newtype.unwrap(newtypeRun)($45));
          };
      };
  };
  var peel = resume(Data_Either.Left.create)(Data_Either.Right.create);
  var run = function (dictMonad) {
      return function (k) {
          var loop = resume(function (a) {
              return Control_Bind.bindFlipped(dictMonad.Bind1())(loop)(k(a));
          })(Control_Applicative.pure(dictMonad.Applicative0()));
          return loop;
      };
  };  
  var runBaseAff$prime = run(Control_Monad_Aff.monadAff)(Data_Functor_Variant.match()(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchCons(Data_Variant_Internal.variantFMatchNil)()(Type_Equality.refl))()(Type_Equality.refl))()({
      aff: function (a) {
          return a;
      },
      eff: function (a) {
          return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(a);
      }
  }));
  var runRec = function (dictMonadRec) {
      return function (k) {
          return function ($48) {
              return Control_Monad_Free.runFreeM(Data_Functor_Variant.functorVariantF)(dictMonadRec)(k)(Data_Newtype.unwrap(newtypeRun)($48));
          };
      };
  };  
  var monadRun = Control_Monad_Free.freeMonad;
  var lift = function (dictRowCons) {
      return function (dictIsSymbol) {
          return function (dictFunctor) {
              return function (p) {
                  return function ($49) {
                      return Run(Control_Monad_Free.liftF(Data_Functor_Variant.inj(dictRowCons)(dictIsSymbol)(dictFunctor)(p)($49)));
                  };
              };
          };
      };
  };
  var liftAff = lift()(new Data_Symbol.IsSymbol(function () {
      return "aff";
  }))(Control_Monad_Aff.functorAff)(Data_Symbol.SProxy.value);
  var liftEff = lift()(new Data_Symbol.IsSymbol(function () {
      return "eff";
  }))(Control_Monad_Eff.functorEff)(Data_Symbol.SProxy.value);
  var interpretRec = function (dictMonadRec) {
      return runRec(dictMonadRec);
  };
  var functorRun = Control_Monad_Free.freeFunctor;
  var bindRun = Control_Monad_Free.freeBind;  
  var applicativeRun = Control_Monad_Free.freeApplicative;
  var monadRecRun = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadRun;
  }, function (f) {
      var loop = function (a) {
          return Control_Bind.bind(bindRun)(f(a))(function (v) {
              if (v instanceof Control_Monad_Rec_Class.Done) {
                  return Control_Applicative.pure(applicativeRun)(v.value0);
              };
              if (v instanceof Control_Monad_Rec_Class.Loop) {
                  return loop(v.value0);
              };
              throw new Error("Failed pattern match at Run line 99, column 7 - line 101, column 24: " + [ v.constructor.name ]);
          });
      };
      return loop;
  });
  exports["Run"] = Run;
  exports["lift"] = lift;
  exports["send"] = send;
  exports["interpretRec"] = interpretRec;
  exports["run"] = run;
  exports["runRec"] = runRec;
  exports["peel"] = peel;
  exports["resume"] = resume;
  exports["liftEff"] = liftEff;
  exports["liftAff"] = liftAff;
  exports["runBaseAff'"] = runBaseAff$prime;
  exports["newtypeRun"] = newtypeRun;
  exports["functorRun"] = functorRun;
  exports["applicativeRun"] = applicativeRun;
  exports["bindRun"] = bindRun;
  exports["monadRun"] = monadRun;
  exports["monadRecRun"] = monadRecRun;
})(PS["Run"] = PS["Run"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Variant = PS["Data.Functor.Variant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Run = PS["Run"];        
  var Except = function (x) {
      return x;
  };
  var functorExcept = new Data_Functor.Functor(function (f) {
      return function (m) {
          return m;
      };
  });
  var _except = Data_Symbol.SProxy.value;
  var $$catch = (function () {
      var handle = Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
          return "except";
      }))(_except)(Data_Either.Left.create)(Data_Either.Right.create);
      var loop = function (k) {
          return function (r) {
              var v = Run.peel(r);
              if (v instanceof Data_Either.Left) {
                  var v1 = handle(v.value0);
                  if (v1 instanceof Data_Either.Left) {
                      return k(v1.value0);
                  };
                  if (v1 instanceof Data_Either.Right) {
                      return Control_Bind.bind(Run.bindRun)(Run.send(v1.value0))($$catch(k));
                  };
                  throw new Error("Failed pattern match at Run.Except line 58, column 14 - line 62, column 32: " + [ v1.constructor.name ]);
              };
              if (v instanceof Data_Either.Right) {
                  return Control_Applicative.pure(Run.applicativeRun)(v.value0);
              };
              throw new Error("Failed pattern match at Run.Except line 57, column 14 - line 64, column 13: " + [ v.constructor.name ]);
          };
      };
      return loop;
  })();
  var liftExcept = Run.lift()(new Data_Symbol.IsSymbol(function () {
      return "except";
  }))(functorExcept)(_except);
  var $$throw = function ($21) {
      return liftExcept(Except($21));
  };                                  
  var rethrow = Data_Either.either($$throw)(Control_Applicative.pure(Run.applicativeRun));
  var runExcept = (function () {
      var handle = Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
          return "except";
      }))(_except)(Data_Either.Left.create)(Data_Either.Right.create);
      var loop = function (r) {
          var v = Run.peel(r);
          if (v instanceof Data_Either.Left) {
              var v1 = handle(v.value0);
              if (v1 instanceof Data_Either.Left) {
                  return Control_Applicative.pure(Run.applicativeRun)(new Data_Either.Left(v1.value0));
              };
              if (v1 instanceof Data_Either.Right) {
                  return Control_Bind.bind(Run.bindRun)(Run.send(v1.value0))(runExcept);
              };
              throw new Error("Failed pattern match at Run.Except line 71, column 14 - line 75, column 34: " + [ v1.constructor.name ]);
          };
          if (v instanceof Data_Either.Right) {
              return Control_Applicative.pure(Run.applicativeRun)(new Data_Either.Right(v.value0));
          };
          throw new Error("Failed pattern match at Run.Except line 70, column 12 - line 77, column 21: " + [ v.constructor.name ]);
      };
      return loop;
  })();
  exports["Except"] = Except;
  exports["_except"] = _except;
  exports["liftExcept"] = liftExcept;
  exports["runExcept"] = runExcept;
  exports["throw"] = $$throw;
  exports["rethrow"] = rethrow;
  exports["catch"] = $$catch;
  exports["functorExcept"] = functorExcept;
})(PS["Run.Except"] = PS["Run.Except"] || {});
(function(exports) {
    "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_Class = PS["Control.Monad.Aff.Class"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Argonaut = PS["Data.Argonaut"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Variant = PS["Data.Functor.Variant"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Symbol = PS["Data.Symbol"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Debug_Trace = PS["Debug.Trace"];
  var Lunapark_Affjax = PS["Lunapark.Affjax"];
  var Lunapark_Endpoint = PS["Lunapark.Endpoint"];
  var Lunapark_Error = PS["Lunapark.Error"];
  var Lunapark_Types = PS["Lunapark.Types"];
  var Network_HTTP_Affjax = PS["Network.HTTP.Affjax"];
  var Prelude = PS["Prelude"];
  var Run = PS["Run"];
  var Run_Except = PS["Run.Except"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var Quit = (function () {
      function Quit(value0) {
          this.value0 = value0;
      };
      Quit.create = function (value0) {
          return new Quit(value0);
      };
      return Quit;
  })();
  var Status = (function () {
      function Status(value0) {
          this.value0 = value0;
      };
      Status.create = function (value0) {
          return new Status(value0);
      };
      return Status;
  })();
  var GetTimeouts = (function () {
      function GetTimeouts(value0) {
          this.value0 = value0;
      };
      GetTimeouts.create = function (value0) {
          return new GetTimeouts(value0);
      };
      return GetTimeouts;
  })();
  var SetTimeouts = (function () {
      function SetTimeouts(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      SetTimeouts.create = function (value0) {
          return function (value1) {
              return new SetTimeouts(value0, value1);
          };
      };
      return SetTimeouts;
  })();
  var Lunapark = function (x) {
      return x;
  };
  var newtypeLunapark = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Lunapark);                    
  var handleLunapark = function (inp) {
      var throwLeft = function (res) {
          if (res instanceof Data_Either.Right) {
              return Control_Applicative.pure(Run.applicativeRun)(res.value0);
          };
          if (res instanceof Data_Either.Left) {
              return Run_Except["throw"](Lunapark_Error.unknownError(res.value0));
          };
          throw new Error("Failed pattern match at Lunapark.API line 210, column 19 - line 212, column 38: " + [ res.constructor.name ]);
      };
      var post_ = Lunapark_Endpoint.post_(inp.uri);
      var post = Lunapark_Endpoint.post(inp.uri);
      var liftAndRethrow = function (a) {
          return Control_Bind.bind(Run.bindRun)(Run.liftAff(a))(function (v) {
              return Run_Except.rethrow(v);
          });
      };
      var inSession = new Lunapark_Endpoint.InSession(inp.session);
      var get = Lunapark_Endpoint.get(inp.uri);
      var $$delete = Lunapark_Endpoint["delete"](inp.uri);
    
      // Safe, since we actually want handler and result have same rows not, remove except
  var $$catch = Data_Function.flip(Run_Except["catch"]);
      var withFallback = function (key) {
          return function ($$try) {
              return function (fallback) {
                  return Control_Bind.bind(Run.bindRun)(Run.liftEff(Control_Monad_Eff_Ref.readRef(inp.requestMapRef)))(function (v) {
                      var v1 = Debug_Trace.spy(Debug_Trace.warn())(Data_Map.lookup(Data_Ord.ordString)(key)(v));
                      if (v1 instanceof Data_Maybe.Just && v1.value0) {
                          return $$try;
                      };
                      if (v1 instanceof Data_Maybe.Just && !v1.value0) {
                          return fallback;
                      };
                      if (v1 instanceof Data_Maybe.Nothing) {
                          var try$prime = Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Debug_Trace.traceAnyA(Debug_Trace.warn())(Run.applicativeRun)("TRY"))(function () {
                              return Control_Bind.bind(Run.bindRun)($$try)(function (v2) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Run.liftEff(Control_Monad_Eff_Ref.modifyRef(inp.requestMapRef)(Data_Map.insert(Data_Ord.ordString)(key)(true))))(function () {
                                      return Control_Applicative.pure(Run.applicativeRun)(v2);
                                  });
                              });
                          });
                          var fallback$prime = Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Debug_Trace.traceAnyA(Debug_Trace.warn())(Run.applicativeRun)("FALLBACK"))(function () {
                              return Control_Bind.bind(Run.bindRun)(fallback)(function (v2) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Run.liftEff(Control_Monad_Eff_Ref.modifyRef(inp.requestMapRef)(Data_Map.insert(Data_Ord.ordString)(key)(false))))(function () {
                                      return Control_Applicative.pure(Run.applicativeRun)(v2);
                                  });
                              });
                          });
                          return $$catch(try$prime)(function (v2) {
                              return fallback$prime;
                          });
                      };
                      throw new Error("Failed pattern match at Lunapark.API line 183, column 5 - line 198, column 37: " + [ v1.constructor.name ]);
                  });
              };
          };
      };
      return function (v) {
          if (v instanceof Quit) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Data_Functor["void"](Run.functorRun)(liftAndRethrow($$delete(new Data_List_Types.Cons(inSession, Data_List_Types.Nil.value)))))(function () {
                  return Control_Applicative.pure(Run.applicativeRun)(v.value0);
              });
          };
          if (v instanceof Status) {
              return Control_Bind.bind(Run.bindRun)(liftAndRethrow(get(new Data_List_Types.Cons(Lunapark_Endpoint.Status.value, Data_List_Types.Nil.value))))(function (v1) {
                  return Control_Bind.bind(Run.bindRun)(throwLeft(Lunapark_Types.decodeServerStatus(v1)))(function (v2) {
                      return Control_Applicative.pure(Run.applicativeRun)(v.value0(v2));
                  });
              });
          };
          if (v instanceof GetTimeouts) {
              return Control_Bind.bind(Run.bindRun)(Run.liftEff(Control_Monad_Eff_Ref.readRef(inp.timeoutsRef)))(function (v1) {
                  return Control_Applicative.pure(Run.applicativeRun)(v.value0(v1));
              });
          };
          if (v instanceof SetTimeouts) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(Run.liftEff(Control_Monad_Eff_Ref.writeRef(inp.timeoutsRef)(v.value0)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Run.bindRun)(withFallback("set timeouts")(Data_Functor["void"](Run.functorRun)(liftAndRethrow(post(new Data_List_Types.Cons(inSession, new Data_List_Types.Cons(Lunapark_Endpoint.Timeouts.value, Data_List_Types.Nil.value)))(Lunapark_Types.encodeTimeouts(v.value0)))))(Data_Foldable.for_(Run.applicativeRun)(Data_Foldable.foldableArray)(Lunapark_Types.encodeLegacyTimeouts(v.value0))(function (j) {
                      return Data_Functor["void"](Run.functorRun)(liftAndRethrow(post(new Data_List_Types.Cons(inSession, new Data_List_Types.Cons(Lunapark_Endpoint.Timeouts.value, Data_List_Types.Nil.value)))(j)));
                  })))(function () {
                      return Control_Applicative.pure(Run.applicativeRun)(v.value1);
                  });
              });
          };
          throw new Error("Failed pattern match at Lunapark.API line 151, column 22 - line 168, column 14: " + [ v.constructor.name ]);
      };
  };
  var functorLunaparkF = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Quit) {
              return new Quit(f(m.value0));
          };
          if (m instanceof Status) {
              return new Status(Data_Functor.map(Data_Functor.functorFn)(f)(m.value0));
          };
          if (m instanceof GetTimeouts) {
              return new GetTimeouts(Data_Functor.map(Data_Functor.functorFn)(f)(m.value0));
          };
          if (m instanceof SetTimeouts) {
              return new SetTimeouts(m.value0, f(m.value1));
          };
          throw new Error("Failed pattern match at Lunapark.API line 79, column 8 - line 79, column 53: " + [ m.constructor.name ]);
      };
  });                                  
  var bindLunapark = Run.bindRun;  
  var applicativeLunapark = Run.applicativeRun;
  var _lunapark = Data_Symbol.SProxy.value;
  var liftLunapark = function ($65) {
      return Lunapark(Run.lift()(new Data_Symbol.IsSymbol(function () {
          return "lunapark";
      }))(functorLunaparkF)(_lunapark)($65));
  };
  var getTimeouts = liftLunapark(new GetTimeouts(Control_Category.id(Control_Category.categoryFn)));
  var quit = liftLunapark(new Quit(Data_Unit.unit));
  var setTimeouts = function (ts) {
      return liftLunapark(new SetTimeouts(ts, Data_Unit.unit));
  };
  var status = liftLunapark(new Status(Control_Category.id(Control_Category.categoryFn)));
  var runLunapark = function (uri) {
      return function (session) {
          return function (capabilities) {
              return function (a) {
                  return Control_Bind.bind(Run.bindRun)(Run.liftEff(Control_Monad_Eff_Ref.newRef({
                      implicit: 0.0,
                      pageLoad: 300000.0,
                      script: 30000.0
                  })))(function (v) {
                      return Control_Bind.bind(Run.bindRun)(Run.liftEff(Control_Monad_Eff_Ref.newRef(Data_Map.empty)))(function (v1) {
                          var input = {
                              timeoutsRef: v,
                              requestMapRef: v1,
                              uri: uri,
                              session: session,
                              capabilities: capabilities
                          };
                          return Run.interpretRec(Run.monadRecRun)(Data_Functor_Variant.on()(new Data_Symbol.IsSymbol(function () {
                              return "lunapark";
                          }))(_lunapark)(handleLunapark(input))(Run.send))(a);
                      });
                  });
              };
          };
      };
  };
  var interpret = function (uri) {
      return function (v) {
          return function (actions) {
            
              // This is definitely safe, because more effects is not less effects
  var expandEffectRows = function (dictUnion) {
                  return Unsafe_Coerce.unsafeCoerce;
              };
              return expandEffectRows()(Run["runBaseAff'"](Run_Except.runExcept(runLunapark(uri)(v.session)(v.capabilities)(Data_Newtype.un(newtypeLunapark)(Lunapark)(actions)))));
          };
      };
  };

  // | Example
  // | ```purescript
  // | runLunapark ← init "http://localhost:4444/wd/hub" SM.empty
  // | result ← runLunapark do
  // |   setTimeouts timeouts
  // |   go "http://google.com"
  // |   findElement ...
  // | ```
  var init = function (dictMonadAff) {
      return function (dictMonadRec) {
          return function (uri) {
              return function (caps) {
                  return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(Control_Monad_Aff_Class.liftAff(dictMonadAff)(Lunapark_Endpoint.post(uri)(new Data_List_Types.Cons(Lunapark_Endpoint.Session.value, Data_List_Types.Nil.value))(Lunapark_Types.encodeCapabilitiesRequest(caps))))(function (v) {
                      var v1 = Control_Bind.bindFlipped(Data_Either.bindEither)(function ($66) {
                          return Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Lunapark_Error.unknownError)(Lunapark_Types.decodeCreateSessionResponse($66));
                      })(v);
                      if (v1 instanceof Data_Either.Left) {
                          return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(function (v2) {
                              return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Data_Either.Left(v1.value0));
                          });
                      };
                      if (v1 instanceof Data_Either.Right) {
                          return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(function (actions) {
                              return Control_Monad_Aff_Class.liftAff(dictMonadAff)(interpret(uri)(v1.value0)(actions));
                          });
                      };
                      throw new Error("Failed pattern match at Lunapark.API line 57, column 3 - line 59, column 64: " + [ v1.constructor.name ]);
                  });
              };
          };
      };
  };
  exports["init"] = init;
  exports["interpret"] = interpret;
  exports["Quit"] = Quit;
  exports["Status"] = Status;
  exports["GetTimeouts"] = GetTimeouts;
  exports["SetTimeouts"] = SetTimeouts;
  exports["Lunapark"] = Lunapark;
  exports["_lunapark"] = _lunapark;
  exports["liftLunapark"] = liftLunapark;
  exports["quit"] = quit;
  exports["status"] = status;
  exports["setTimeouts"] = setTimeouts;
  exports["getTimeouts"] = getTimeouts;
  exports["runLunapark"] = runLunapark;
  exports["handleLunapark"] = handleLunapark;
  exports["functorLunaparkF"] = functorLunaparkF;
  exports["newtypeLunapark"] = newtypeLunapark;
  exports["applicativeLunapark"] = applicativeLunapark;
  exports["bindLunapark"] = bindLunapark;
})(PS["Lunapark.API"] = PS["Lunapark.API"] || {});
(function(exports) {
    "use strict";
  var CSS = PS["CSS"];
  var CSS_Selector = PS["CSS.Selector"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_Class = PS["Control.Monad.Aff.Class"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Now = PS["Control.Monad.Eff.Now"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Data_Argonaut = PS["Data.Argonaut"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Map = PS["Data.Map"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Posix_Signal = PS["Data.Posix.Signal"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Tuple = PS["Data.Tuple"];
  var Debug_Trace = PS["Debug.Trace"];
  var Lunapark_API = PS["Lunapark.API"];
  var Lunapark_Helpers = PS["Lunapark.Helpers"];
  var Lunapark_Starter = PS["Lunapark.Starter"];
  var Lunapark_Types = PS["Lunapark.Types"];
  var Network_HTTP_Affjax = PS["Network.HTTP.Affjax"];
  var Node_ChildProcess = PS["Node.ChildProcess"];
  var Node_Process = PS["Node.Process"];
  var Prelude = PS["Prelude"];
  var Run = PS["Run"];        
  var main = Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Aff.launchAff(Control_Bind.bind(Control_Monad_Aff.bindAff)(Lunapark_API.init(Control_Monad_Aff_Class.monadAffAff)(Control_Monad_Aff.monadRecAff)("http://localhost:4444/wd/hub")({
      alwaysMatch: [  ],
      firstMatch: [ [ new Lunapark_Types.BrowserName(Lunapark_Types.Chrome.value) ] ]
  }))(function (v) {
      return Control_Bind.bind(Control_Monad_Aff.bindAff)(v(Control_Bind.bind(Lunapark_API.bindLunapark)(Lunapark_API.status)(function (v1) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Lunapark_API.bindLunapark)(Debug_Trace.traceAnyA(Debug_Trace.warn())(Lunapark_API.applicativeLunapark)("status"))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Lunapark_API.bindLunapark)(Debug_Trace.traceAnyA(Debug_Trace.warn())(Lunapark_API.applicativeLunapark)(v1))(function () {
                  return Control_Bind.bind(Lunapark_API.bindLunapark)(Lunapark_API.getTimeouts)(function (v2) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Lunapark_API.bindLunapark)(Debug_Trace.traceAnyA(Debug_Trace.warn())(Lunapark_API.applicativeLunapark)("timeouts"))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Lunapark_API.bindLunapark)(Debug_Trace.traceAnyA(Debug_Trace.warn())(Lunapark_API.applicativeLunapark)(v2))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Lunapark_API.bindLunapark)(Lunapark_API.setTimeouts((function () {
                                  var $9 = {};
                                  for (var $10 in v2) {
                                      if ({}.hasOwnProperty.call(v2, $10)) {
                                          $9[$10] = v2[$10];
                                      };
                                  };
                                  $9.pageLoad = Data_Newtype.wrap(Data_Time_Duration.newtypeMilliseconds)(10.0);
                                  return $9;
                              })()))(function () {
                                  return Control_Bind.bind(Lunapark_API.bindLunapark)(Lunapark_API.getTimeouts)(function (v3) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Lunapark_API.bindLunapark)(Debug_Trace.traceAnyA(Debug_Trace.warn())(Lunapark_API.applicativeLunapark)("timeouts'"))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Lunapark_API.bindLunapark)(Debug_Trace.traceAnyA(Debug_Trace.warn())(Lunapark_API.applicativeLunapark)(v3))(function () {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Lunapark_API.bindLunapark)(Lunapark_API.setTimeouts(v2))(function () {
                                                  return Lunapark_API.quit;
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      })))(function (v1) {
          return Debug_Trace.traceAnyA(Debug_Trace.warn())(Control_Monad_Aff.applicativeAff)(v1);
      });
  })));
  var defaultTimeouts = {
      pageLoad: Data_Newtype.wrap(Data_Time_Duration.newtypeMilliseconds)(300000.0),
      implicit: Data_Newtype.wrap(Data_Time_Duration.newtypeMilliseconds)(0.0),
      script: Data_Newtype.wrap(Data_Time_Duration.newtypeMilliseconds)(30000.0)
  };
  exports["defaultTimeouts"] = defaultTimeouts;
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();